using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace;

    public enum RequestNotification
    {
        AcquireRequestState = 32,
        AuthenticateRequest = 2,
        AuthorizeRequest = 4,
        BeginRequest = 1,
        EndRequest = 2048,
        ExecuteRequestHandler = 128,
        LogRequest = 1024,
        MapRequestHandler = 16,
        PreExecuteRequestHandler = 64,
        ReleaseRequestState = 256,
        ResolveRequestCache = 8,
        SendResponse = 536870912,
        UpdateRequestCache = 512
    }

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class IisTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "IIS_Trace";
        public static Guid ProviderGuid = new Guid(unchecked((int)0x3a2a4e84), unchecked((short)0x4c21), unchecked((short)0x4981), 0xae, 0x10, 0x3f, 0xda, 0x0d, 0x9b, 0x0f, 0x83);
        public static Guid IISTransGuid = Guid.Parse("{d42cf7ef-de92-473e-8b6c-621ea663113a}");
        public static Guid IISAuthenticationTransGuid = Guid.Parse("{c33bbe8f-985b-4080-81e6-005f1a06b9e2}");
        public static Guid IISSecurityTransGuid = Guid.Parse("{29347ffb-ba48-41e6-bffd-469c5e543ca5}");
        public static Guid IISFilterTransGuid = Guid.Parse("{00237f0d-73eb-4bcf-a232-126693595847}");
        public static Guid IISStaticFileTransGuid = Guid.Parse("{79b02104-0db9-4cda-a552-058d97c2ecfd}");
        public static Guid IsapiTransGuid = Guid.Parse("{2e94e6c7-eda0-4b73-9010-2529edce1c27}");
        public static Guid IISCgiTransGuid = Guid.Parse("{e2e55403-0d2e-4609-a470-be0da04013c0}");
        public static Guid IISFastCgiTransGuid = Guid.Parse("{e3642acc-3627-42b0-8372-867baa033b07}");
        public static Guid IISWebSocketTransGuid = Guid.Parse("{2ce74327-08be-425c-bfc5-1534fe7fefa6}");
        public static Guid IISCompressionTransGuid = Guid.Parse("{e60cee96-4472-448d-a13c-2170b18220ec}");
        public static Guid IISCacheTransGuid = Guid.Parse("{ac1d69f1-bf33-4ca0-9313-bca13873e1dc}");
        public static Guid IISRequestNotificationEventsGuid = Guid.Parse("{002e91e3-e7ae-44ab-8e07-99230ffa6ade}");
        public static Guid IISModuleEventsGuid = Guid.Parse("{d79a948e-95f1-417b-a731-b7a79dec7ae5}");
        public enum Keywords : long
        {
        };

        

        public IisTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<W3AuthStart> IIS_Authentication_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthSucceeded> IIS_Authentication_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthTypeNotSupported> IIS_Authentication_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthInvalidAnonAccount> IIS_Authentication_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthPasswdChangeNeeded> IIS_Authentication_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthPasswdChangeDisabled> IIS_Authentication_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthBadBasicHeader> IIS_Authentication_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthBasicLogonFailed> IIS_Authentication_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthWDigestLogonFailed> IIS_Authentication_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthIISDigestLogonFailed> IIS_Authentication_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthPassportLogonFailed> IIS_Authentication_TransOpcode20
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode20Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthSSPILogonFailed> IIS_Authentication_TransOpcode21
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode21Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthNTLMNullSession> IIS_Authentication_TransOpcode22
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode22Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthSSPIContinueNeeded> IIS_Authentication_TransOpcode23
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode23Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthAnonPasswdChangeNeeded> IIS_Authentication_TransOpcode24
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode24Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthRequestAuthType> IIS_Authentication_TransOpcode27
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode27Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthEnd> IIS_Authentication_TransOpcode28
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode28Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3AuthKerberosFailed> IIS_Authentication_TransOpcode55
        {
            add
            {
                source.RegisterEventTemplate(IIS_Authentication_TransOpcode55Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10001, ProviderGuid);
            }
        }
        public event Action<W3CacheFileCacheAccessStart> IIS_Cache_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CacheFileCacheAccessEnd> IIS_Cache_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CacheURLCacheAccessStart> IIS_Cache_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CacheURLCacheAccessEnd> IIS_Cache_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CacheHttpsysCacheable> IIS_Cache_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3OutputCacheLookupStart> IIS_Cache_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3OutputCacheLookupEnd> IIS_Cache_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3OutputCacheUpdateStart> IIS_Cache_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3OutputCacheUpdateEnd> IIS_Cache_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3OutputCacheDisabled> IIS_Cache_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CacheFileCacheCreateFile> IIS_Cache_TransOpcode20
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cache_TransOpcode20Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10009, ProviderGuid);
            }
        }
        public event Action<W3CGILaunch> IIS_Cgi_TransDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGITimeout> IIS_Cgi_TransDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGIPrematureTermination> IIS_Cgi_TransExtension
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGIRequestEntitySent> IIS_Cgi_TransReply
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGIHeadersReceived> IIS_Cgi_TransResume
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransResumeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGIStart> IIS_Cgi_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3CGIEnd> IIS_Cgi_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_Cgi_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10005, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionNotSuccess> IIS_Compression_TransDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionCreateStart> IIS_Compression_TransDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionCreateEnd> IIS_Compression_TransExtension
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3DynamicCompressionEnd> IIS_Compression_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionEnd> IIS_Compression_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3DynamicCompressionStart> IIS_Compression_TransReply
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3DynamicCompressionSuccess> IIS_Compression_TransResume
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransResumeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3DynamicCompressionDo> IIS_Compression_TransSend
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionStart> IIS_Compression_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3StaticCompressionSuccess> IIS_Compression_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3DynamicCompressionNotSuccess> IIS_Compression_TransSuspend
        {
            add
            {
                source.RegisterEventTemplate(IIS_Compression_TransSuspendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10008, ProviderGuid);
            }
        }
        public event Action<W3CGIFUnexpectedExit> IIS_FastCgi_TransDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFRapidFailureProtection> IIS_FastCgi_TransDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFPathNotFound> IIS_FastCgi_TransExtension
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFUnknownError> IIS_FastCgi_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFResponseWritten> IIS_FastCgi_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFWaitingForResponse> IIS_FastCgi_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFTraceError> IIS_FastCgi_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFTraceWarning> IIS_FastCgi_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFTraceInfo> IIS_FastCgi_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFQueueRequest> IIS_FastCgi_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFAssignProcess> IIS_FastCgi_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFStart> IIS_FastCgi_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFEnd> IIS_FastCgi_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFScriptProcessorMissing> IIS_FastCgi_TransReply
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFAddJobObjectFail> IIS_FastCgi_TransResume
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransResumeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFQueueFull> IIS_FastCgi_TransSend
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFActivityTimeout> IIS_FastCgi_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFRequestTimeout> IIS_FastCgi_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3CGIFAppMgrShutdown> IIS_FastCgi_TransSuspend
        {
            add
            {
                source.RegisterEventTemplate(IIS_FastCgi_TransSuspendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10006, ProviderGuid);
            }
        }
        public event Action<W3FilterError> IIS_Filter_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterPreprocStart> IIS_Filter_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterPreprocEnd> IIS_Filter_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterURLMapStart> IIS_Filter_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterURLMapEnd> IIS_Filter_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAuthenticationStart> IIS_Filter_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAuthenticationEnd> IIS_Filter_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAuthCompleteStart> IIS_Filter_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAuthCompleteEnd> IIS_Filter_TransOpcode20
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode20Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSendResponseStart> IIS_Filter_TransOpcode21
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode21Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSendResponseEnd> IIS_Filter_TransOpcode22
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode22Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterEndOfRequestStart> IIS_Filter_TransOpcode23
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode23Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterEndOfRequestEnd> IIS_Filter_TransOpcode24
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode24Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterLogStart> IIS_Filter_TransOpcode25
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode25Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterLogEnd> IIS_Filter_TransOpcode26
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode26Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSendRawDataStart> IIS_Filter_TransOpcode27
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode27Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSendRawDataEnd> IIS_Filter_TransOpcode28
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode28Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAccessDeniedStart> IIS_Filter_TransOpcode29
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode29Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAccessDeniedEnd> IIS_Filter_TransOpcode30
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode30Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSetReqHeader> IIS_Filter_TransOpcode31
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode31Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAddReqHeader> IIS_Filter_TransOpcode32
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode32Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterSetRespHeader> IIS_Filter_TransOpcode33
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode33Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterAddRespHeader> IIS_Filter_TransOpcode34
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransOpcode34Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterStart> IIS_Filter_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3FilterEnd> IIS_Filter_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_Filter_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10003, ProviderGuid);
            }
        }
        public event Action<W3SecIllegalShortFilename> IIS_Security_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecRejectedIP> IIS_Security_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecRejectedHostname> IIS_Security_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecRequireSSL128> IIS_Security_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecFileAccessDenied> IIS_Security_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecDeniedByMimemap> IIS_Security_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecDeniedByISAPIRestriction> IIS_Security_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecDeniedByCGIRestriction> IIS_Security_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3SecDeniedByAccessFlags> IIS_Security_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_Security_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10002, ProviderGuid);
            }
        }
        public event Action<W3GeneralStaticFileHandler> IIS_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralCGIHandler> IIS_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralISAPIHandler> IIS_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralOopISAPIHandler> IIS_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralRedirectionHandler> IIS_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralDavHandler> IIS_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralOptionsHandler> IIS_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralTraceHandler> IIS_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode20
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode20Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode21
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode21Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode22
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode22Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode23
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode23Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3SendResponse> IIS_TransOpcode24
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode24Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralGetURLMetadata> IIS_TransOpcode30
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode30Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralChildRequestStart> IIS_TransOpcode31
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode31Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralChildRequestEnd> IIS_TransOpcode32
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode32Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralSendCustomError> IIS_TransOpcode33
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode33Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralMapHandler> IIS_TransOpcode34
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode34Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralFlushResponseStart> IIS_TransOpcode35
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode35Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralFlushResponseEnd> IIS_TransOpcode36
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode36Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralReadEntityStart> IIS_TransOpcode37
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode37Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralReadEntityEnd> IIS_TransOpcode38
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode38Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralFileChangeNotification> IIS_TransOpcode39
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode39Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralConfigChangeNotification> IIS_TransOpcode40
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode40Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralVirtualModuleUnresolved> IIS_TransOpcode41
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode41Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralUrlChanged> IIS_TransOpcode42
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode42Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralHandlerChanged> IIS_TransOpcode43
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode43Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralUserSet> IIS_TransOpcode44
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode44Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralModulePreconditionNotMatch> IIS_TransOpcode45
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode45Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<IISGeneralHandlerPreconditionNotMatch> IIS_TransOpcode46
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode46Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralResponseHeaders> IIS_TransOpcode47
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode47Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralResponseEntityFile> IIS_TransOpcode48
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode48Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralResponseEntityBuffer> IIS_TransOpcode49
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode49Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralRequestHeaders> IIS_TransOpcode50
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode50Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralRequestEntity> IIS_TransOpcode51
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode51Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralNotSendCustomError> IIS_TransOpcode52
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode52Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralSetRequestHeader> IIS_TransOpcode53
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode53Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralModuleFactoryFailed> IIS_TransOpcode54
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode54Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralEndpointInformation> IIS_TransOpcode55
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode55Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralSetResponseHeader> IIS_TransOpcode56
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransOpcode56Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralStartNewRequest> IIS_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3GeneralEndNewRequest> IIS_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10000, ProviderGuid);
            }
        }
        public event Action<W3WebSocketEndSuccess> IIS_WebSocket_TransDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketEndFailure> IIS_WebSocket_TransDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketReadFragmentStart> IIS_WebSocket_TransExtension
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketWriteFragmentEndPending> IIS_WebSocket_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketWriteFragmentEndSuccess> IIS_WebSocket_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketWriteFragmentEndFailure> IIS_WebSocket_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketApplicationCloseConnection> IIS_WebSocket_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketModuleCloseConnection> IIS_WebSocket_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketReadIoFailed> IIS_WebSocket_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketWriteIoFailed> IIS_WebSocket_TransOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketCloseReceived> IIS_WebSocket_TransOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketCloseSendStart> IIS_WebSocket_TransOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketCloseSendSuccess> IIS_WebSocket_TransOpcode19
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode19Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketCloseSendFailure> IIS_WebSocket_TransOpcode20
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransOpcode20Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketReadFragmentEndPending> IIS_WebSocket_TransReply
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketReadFragmentEndSuccess> IIS_WebSocket_TransResume
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransResumeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketWriteFragmentStart> IIS_WebSocket_TransSend
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransSendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketInitializeNotSuccess> IIS_WebSocket_TransStart
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketStart> IIS_WebSocket_TransStop
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<W3WebSocketReadFragmentEndFailure> IIS_WebSocket_TransSuspend
        {
            add
            {
                source.RegisterEventTemplate(IIS_WebSocket_TransSuspendTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10007, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleCriticalError> IISModuleEventsDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleError> IISModuleEventsDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleWarning> IISModuleEventsExtension
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleInformation> IISModuleEventsReply
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsReplyTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleVerbose> IISModuleEventsResume
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsResumeTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleStart> IISModuleEventsStart
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISModuleEventsModuleEnd> IISModuleEventsStop
        {
            add
            {
                source.RegisterEventTemplate(IISModuleEventsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10011, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsCompletion> IISRequestNotificationEventsDC_Start
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsDC_StartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationPreBeginStart> IISRequestNotificationEventsDC_Stop
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsDC_StopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationPreBeginEnd> IISRequestNotificationEventsExtension
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsExtensionTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsError> IISRequestNotificationEventsOpcode15
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsResponseErrorStatus> IISRequestNotificationEventsOpcode16
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsOpcode16Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsResponseSuccessStatus> IISRequestNotificationEventsOpcode17
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsOpcode17Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsResponseErrorDescription> IISRequestNotificationEventsOpcode18
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsOpcode18Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsStart> IISRequestNotificationEventsStart
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IISRequestNotificationEventsEnd> IISRequestNotificationEventsStop
        {
            add
            {
                source.RegisterEventTemplate(IISRequestNotificationEventsStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10010, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode10
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode11
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode11Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode12
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode12Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode13
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode13Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode14
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode14Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<IsapiDeleteContext> Isapi_TransOpcode15
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransOpcode15Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<W3ISAPIStart> Isapi_TransStart
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }
        public event Action<W3ISAPIEnd> Isapi_TransStop
        {
            add
            {
                source.RegisterEventTemplate(Isapi_TransStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10004, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private W3AuthStart IIS_Authentication_TransOpcode10Template(Action<W3AuthStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthStart(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3AuthSucceeded IIS_Authentication_TransOpcode11Template(Action<W3AuthSucceeded> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthSucceeded(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3AuthTypeNotSupported IIS_Authentication_TransOpcode12Template(Action<W3AuthTypeNotSupported> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthTypeNotSupported(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3AuthInvalidAnonAccount IIS_Authentication_TransOpcode13Template(Action<W3AuthInvalidAnonAccount> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthInvalidAnonAccount(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3AuthPasswdChangeNeeded IIS_Authentication_TransOpcode14Template(Action<W3AuthPasswdChangeNeeded> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthPasswdChangeNeeded(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3AuthPasswdChangeDisabled IIS_Authentication_TransOpcode15Template(Action<W3AuthPasswdChangeDisabled> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthPasswdChangeDisabled(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3AuthBadBasicHeader IIS_Authentication_TransOpcode16Template(Action<W3AuthBadBasicHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthBadBasicHeader(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3AuthBasicLogonFailed IIS_Authentication_TransOpcode17Template(Action<W3AuthBasicLogonFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthBasicLogonFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3AuthWDigestLogonFailed IIS_Authentication_TransOpcode18Template(Action<W3AuthWDigestLogonFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthWDigestLogonFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3AuthIISDigestLogonFailed IIS_Authentication_TransOpcode19Template(Action<W3AuthIISDigestLogonFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthIISDigestLogonFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3AuthPassportLogonFailed IIS_Authentication_TransOpcode20Template(Action<W3AuthPassportLogonFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthPassportLogonFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 20, "Opcode20", ProviderGuid, ProviderName);
        }
        static private W3AuthSSPILogonFailed IIS_Authentication_TransOpcode21Template(Action<W3AuthSSPILogonFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthSSPILogonFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 21, "Opcode21", ProviderGuid, ProviderName);
        }
        static private W3AuthNTLMNullSession IIS_Authentication_TransOpcode22Template(Action<W3AuthNTLMNullSession> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthNTLMNullSession(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 22, "Opcode22", ProviderGuid, ProviderName);
        }
        static private W3AuthSSPIContinueNeeded IIS_Authentication_TransOpcode23Template(Action<W3AuthSSPIContinueNeeded> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthSSPIContinueNeeded(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 23, "Opcode23", ProviderGuid, ProviderName);
        }
        static private W3AuthAnonPasswdChangeNeeded IIS_Authentication_TransOpcode24Template(Action<W3AuthAnonPasswdChangeNeeded> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthAnonPasswdChangeNeeded(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 24, "Opcode24", ProviderGuid, ProviderName);
        }
        static private W3AuthRequestAuthType IIS_Authentication_TransOpcode27Template(Action<W3AuthRequestAuthType> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthRequestAuthType(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 27, "Opcode27", ProviderGuid, ProviderName);
        }
        static private W3AuthEnd IIS_Authentication_TransOpcode28Template(Action<W3AuthEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthEnd(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 28, "Opcode28", ProviderGuid, ProviderName);
        }
        static private W3AuthKerberosFailed IIS_Authentication_TransOpcode55Template(Action<W3AuthKerberosFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3AuthKerberosFailed(action, 10001, 1, "IIS_Authentication_Trans", IISAuthenticationTransGuid, 55, "Opcode55", ProviderGuid, ProviderName);
        }
        static private W3CacheFileCacheAccessStart IIS_Cache_TransOpcode10Template(Action<W3CacheFileCacheAccessStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheFileCacheAccessStart(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3CacheFileCacheAccessEnd IIS_Cache_TransOpcode11Template(Action<W3CacheFileCacheAccessEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheFileCacheAccessEnd(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3CacheURLCacheAccessStart IIS_Cache_TransOpcode12Template(Action<W3CacheURLCacheAccessStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheURLCacheAccessStart(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3CacheURLCacheAccessEnd IIS_Cache_TransOpcode13Template(Action<W3CacheURLCacheAccessEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheURLCacheAccessEnd(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3CacheHttpsysCacheable IIS_Cache_TransOpcode14Template(Action<W3CacheHttpsysCacheable> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheHttpsysCacheable(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3OutputCacheLookupStart IIS_Cache_TransOpcode15Template(Action<W3OutputCacheLookupStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3OutputCacheLookupStart(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3OutputCacheLookupEnd IIS_Cache_TransOpcode16Template(Action<W3OutputCacheLookupEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3OutputCacheLookupEnd(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3OutputCacheUpdateStart IIS_Cache_TransOpcode17Template(Action<W3OutputCacheUpdateStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3OutputCacheUpdateStart(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3OutputCacheUpdateEnd IIS_Cache_TransOpcode18Template(Action<W3OutputCacheUpdateEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3OutputCacheUpdateEnd(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3OutputCacheDisabled IIS_Cache_TransOpcode19Template(Action<W3OutputCacheDisabled> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3OutputCacheDisabled(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3CacheFileCacheCreateFile IIS_Cache_TransOpcode20Template(Action<W3CacheFileCacheCreateFile> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CacheFileCacheCreateFile(action, 10009, 10, "IIS_Cache_Trans", IISCacheTransGuid, 20, "Opcode20", ProviderGuid, ProviderName);
        }
        static private W3CGILaunch IIS_Cgi_TransDC_StartTemplate(Action<W3CGILaunch> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGILaunch(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private W3CGITimeout IIS_Cgi_TransDC_StopTemplate(Action<W3CGITimeout> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGITimeout(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private W3CGIPrematureTermination IIS_Cgi_TransExtensionTemplate(Action<W3CGIPrematureTermination> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIPrematureTermination(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private W3CGIRequestEntitySent IIS_Cgi_TransReplyTemplate(Action<W3CGIRequestEntitySent> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIRequestEntitySent(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 6, "Reply", ProviderGuid, ProviderName);
        }
        static private W3CGIHeadersReceived IIS_Cgi_TransResumeTemplate(Action<W3CGIHeadersReceived> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIHeadersReceived(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 7, "Resume", ProviderGuid, ProviderName);
        }
        static private W3CGIStart IIS_Cgi_TransStartTemplate(Action<W3CGIStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIStart(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3CGIEnd IIS_Cgi_TransStopTemplate(Action<W3CGIEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIEnd(action, 10005, 6, "IIS_Cgi_Trans", IISCgiTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionNotSuccess IIS_Compression_TransDC_StartTemplate(Action<W3StaticCompressionNotSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionNotSuccess(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionCreateStart IIS_Compression_TransDC_StopTemplate(Action<W3StaticCompressionCreateStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionCreateStart(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionCreateEnd IIS_Compression_TransExtensionTemplate(Action<W3StaticCompressionCreateEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionCreateEnd(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private W3DynamicCompressionEnd IIS_Compression_TransOpcode10Template(Action<W3DynamicCompressionEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3DynamicCompressionEnd(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionEnd IIS_Compression_TransOpcode11Template(Action<W3StaticCompressionEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionEnd(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3DynamicCompressionStart IIS_Compression_TransReplyTemplate(Action<W3DynamicCompressionStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3DynamicCompressionStart(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 6, "Reply", ProviderGuid, ProviderName);
        }
        static private W3DynamicCompressionSuccess IIS_Compression_TransResumeTemplate(Action<W3DynamicCompressionSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3DynamicCompressionSuccess(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 7, "Resume", ProviderGuid, ProviderName);
        }
        static private W3DynamicCompressionDo IIS_Compression_TransSendTemplate(Action<W3DynamicCompressionDo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3DynamicCompressionDo(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 9, "Send", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionStart IIS_Compression_TransStartTemplate(Action<W3StaticCompressionStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionStart(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3StaticCompressionSuccess IIS_Compression_TransStopTemplate(Action<W3StaticCompressionSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3StaticCompressionSuccess(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3DynamicCompressionNotSuccess IIS_Compression_TransSuspendTemplate(Action<W3DynamicCompressionNotSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3DynamicCompressionNotSuccess(action, 10008, 9, "IIS_Compression_Trans", IISCompressionTransGuid, 8, "Suspend", ProviderGuid, ProviderName);
        }
        static private W3CGIFUnexpectedExit IIS_FastCgi_TransDC_StartTemplate(Action<W3CGIFUnexpectedExit> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFUnexpectedExit(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private W3CGIFRapidFailureProtection IIS_FastCgi_TransDC_StopTemplate(Action<W3CGIFRapidFailureProtection> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFRapidFailureProtection(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private W3CGIFPathNotFound IIS_FastCgi_TransExtensionTemplate(Action<W3CGIFPathNotFound> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFPathNotFound(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private W3CGIFUnknownError IIS_FastCgi_TransOpcode10Template(Action<W3CGIFUnknownError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFUnknownError(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3CGIFResponseWritten IIS_FastCgi_TransOpcode11Template(Action<W3CGIFResponseWritten> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFResponseWritten(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3CGIFWaitingForResponse IIS_FastCgi_TransOpcode12Template(Action<W3CGIFWaitingForResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFWaitingForResponse(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3CGIFTraceError IIS_FastCgi_TransOpcode13Template(Action<W3CGIFTraceError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFTraceError(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3CGIFTraceWarning IIS_FastCgi_TransOpcode14Template(Action<W3CGIFTraceWarning> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFTraceWarning(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3CGIFTraceInfo IIS_FastCgi_TransOpcode15Template(Action<W3CGIFTraceInfo> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFTraceInfo(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3CGIFQueueRequest IIS_FastCgi_TransOpcode16Template(Action<W3CGIFQueueRequest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFQueueRequest(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3CGIFAssignProcess IIS_FastCgi_TransOpcode17Template(Action<W3CGIFAssignProcess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFAssignProcess(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3CGIFStart IIS_FastCgi_TransOpcode18Template(Action<W3CGIFStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFStart(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3CGIFEnd IIS_FastCgi_TransOpcode19Template(Action<W3CGIFEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFEnd(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3CGIFScriptProcessorMissing IIS_FastCgi_TransReplyTemplate(Action<W3CGIFScriptProcessorMissing> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFScriptProcessorMissing(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 6, "Reply", ProviderGuid, ProviderName);
        }
        static private W3CGIFAddJobObjectFail IIS_FastCgi_TransResumeTemplate(Action<W3CGIFAddJobObjectFail> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFAddJobObjectFail(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 7, "Resume", ProviderGuid, ProviderName);
        }
        static private W3CGIFQueueFull IIS_FastCgi_TransSendTemplate(Action<W3CGIFQueueFull> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFQueueFull(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 9, "Send", ProviderGuid, ProviderName);
        }
        static private W3CGIFActivityTimeout IIS_FastCgi_TransStartTemplate(Action<W3CGIFActivityTimeout> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFActivityTimeout(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3CGIFRequestTimeout IIS_FastCgi_TransStopTemplate(Action<W3CGIFRequestTimeout> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFRequestTimeout(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3CGIFAppMgrShutdown IIS_FastCgi_TransSuspendTemplate(Action<W3CGIFAppMgrShutdown> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3CGIFAppMgrShutdown(action, 10006, 7, "IIS_FastCgi_Trans", IISFastCgiTransGuid, 8, "Suspend", ProviderGuid, ProviderName);
        }
        static private W3FilterError IIS_Filter_TransOpcode12Template(Action<W3FilterError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterError(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3FilterPreprocStart IIS_Filter_TransOpcode13Template(Action<W3FilterPreprocStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterPreprocStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3FilterPreprocEnd IIS_Filter_TransOpcode14Template(Action<W3FilterPreprocEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterPreprocEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3FilterURLMapStart IIS_Filter_TransOpcode15Template(Action<W3FilterURLMapStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterURLMapStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3FilterURLMapEnd IIS_Filter_TransOpcode16Template(Action<W3FilterURLMapEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterURLMapEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3FilterAuthenticationStart IIS_Filter_TransOpcode17Template(Action<W3FilterAuthenticationStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAuthenticationStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3FilterAuthenticationEnd IIS_Filter_TransOpcode18Template(Action<W3FilterAuthenticationEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAuthenticationEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3FilterAuthCompleteStart IIS_Filter_TransOpcode19Template(Action<W3FilterAuthCompleteStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAuthCompleteStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3FilterAuthCompleteEnd IIS_Filter_TransOpcode20Template(Action<W3FilterAuthCompleteEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAuthCompleteEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 20, "Opcode20", ProviderGuid, ProviderName);
        }
        static private W3FilterSendResponseStart IIS_Filter_TransOpcode21Template(Action<W3FilterSendResponseStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSendResponseStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 21, "Opcode21", ProviderGuid, ProviderName);
        }
        static private W3FilterSendResponseEnd IIS_Filter_TransOpcode22Template(Action<W3FilterSendResponseEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSendResponseEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 22, "Opcode22", ProviderGuid, ProviderName);
        }
        static private W3FilterEndOfRequestStart IIS_Filter_TransOpcode23Template(Action<W3FilterEndOfRequestStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterEndOfRequestStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 23, "Opcode23", ProviderGuid, ProviderName);
        }
        static private W3FilterEndOfRequestEnd IIS_Filter_TransOpcode24Template(Action<W3FilterEndOfRequestEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterEndOfRequestEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 24, "Opcode24", ProviderGuid, ProviderName);
        }
        static private W3FilterLogStart IIS_Filter_TransOpcode25Template(Action<W3FilterLogStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterLogStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 25, "Opcode25", ProviderGuid, ProviderName);
        }
        static private W3FilterLogEnd IIS_Filter_TransOpcode26Template(Action<W3FilterLogEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterLogEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 26, "Opcode26", ProviderGuid, ProviderName);
        }
        static private W3FilterSendRawDataStart IIS_Filter_TransOpcode27Template(Action<W3FilterSendRawDataStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSendRawDataStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 27, "Opcode27", ProviderGuid, ProviderName);
        }
        static private W3FilterSendRawDataEnd IIS_Filter_TransOpcode28Template(Action<W3FilterSendRawDataEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSendRawDataEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 28, "Opcode28", ProviderGuid, ProviderName);
        }
        static private W3FilterAccessDeniedStart IIS_Filter_TransOpcode29Template(Action<W3FilterAccessDeniedStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAccessDeniedStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 29, "Opcode29", ProviderGuid, ProviderName);
        }
        static private W3FilterAccessDeniedEnd IIS_Filter_TransOpcode30Template(Action<W3FilterAccessDeniedEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAccessDeniedEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 30, "Opcode30", ProviderGuid, ProviderName);
        }
        static private W3FilterSetReqHeader IIS_Filter_TransOpcode31Template(Action<W3FilterSetReqHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSetReqHeader(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 31, "Opcode31", ProviderGuid, ProviderName);
        }
        static private W3FilterAddReqHeader IIS_Filter_TransOpcode32Template(Action<W3FilterAddReqHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAddReqHeader(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 32, "Opcode32", ProviderGuid, ProviderName);
        }
        static private W3FilterSetRespHeader IIS_Filter_TransOpcode33Template(Action<W3FilterSetRespHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterSetRespHeader(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 33, "Opcode33", ProviderGuid, ProviderName);
        }
        static private W3FilterAddRespHeader IIS_Filter_TransOpcode34Template(Action<W3FilterAddRespHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterAddRespHeader(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 34, "Opcode34", ProviderGuid, ProviderName);
        }
        static private W3FilterStart IIS_Filter_TransStartTemplate(Action<W3FilterStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterStart(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3FilterEnd IIS_Filter_TransStopTemplate(Action<W3FilterEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3FilterEnd(action, 10003, 3, "IIS_Filter_Trans", IISFilterTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3SecIllegalShortFilename IIS_Security_TransOpcode10Template(Action<W3SecIllegalShortFilename> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecIllegalShortFilename(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3SecRejectedIP IIS_Security_TransOpcode11Template(Action<W3SecRejectedIP> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecRejectedIP(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3SecRejectedHostname IIS_Security_TransOpcode12Template(Action<W3SecRejectedHostname> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecRejectedHostname(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3SecRequireSSL128 IIS_Security_TransOpcode13Template(Action<W3SecRequireSSL128> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecRequireSSL128(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3SecFileAccessDenied IIS_Security_TransOpcode14Template(Action<W3SecFileAccessDenied> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecFileAccessDenied(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3SecDeniedByMimemap IIS_Security_TransOpcode15Template(Action<W3SecDeniedByMimemap> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecDeniedByMimemap(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3SecDeniedByISAPIRestriction IIS_Security_TransOpcode16Template(Action<W3SecDeniedByISAPIRestriction> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecDeniedByISAPIRestriction(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3SecDeniedByCGIRestriction IIS_Security_TransOpcode17Template(Action<W3SecDeniedByCGIRestriction> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecDeniedByCGIRestriction(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3SecDeniedByAccessFlags IIS_Security_TransOpcode18Template(Action<W3SecDeniedByAccessFlags> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SecDeniedByAccessFlags(action, 10002, 2, "IIS_Security_Trans", IISSecurityTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3GeneralStaticFileHandler IIS_TransOpcode10Template(Action<W3GeneralStaticFileHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralStaticFileHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3GeneralCGIHandler IIS_TransOpcode11Template(Action<W3GeneralCGIHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralCGIHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3GeneralISAPIHandler IIS_TransOpcode12Template(Action<W3GeneralISAPIHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralISAPIHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3GeneralOopISAPIHandler IIS_TransOpcode13Template(Action<W3GeneralOopISAPIHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralOopISAPIHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3GeneralRedirectionHandler IIS_TransOpcode14Template(Action<W3GeneralRedirectionHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralRedirectionHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3GeneralDavHandler IIS_TransOpcode15Template(Action<W3GeneralDavHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralDavHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3GeneralOptionsHandler IIS_TransOpcode16Template(Action<W3GeneralOptionsHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralOptionsHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3GeneralTraceHandler IIS_TransOpcode17Template(Action<W3GeneralTraceHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralTraceHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode18Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode19Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode20Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 20, "Opcode20", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode21Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 21, "Opcode21", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode22Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 22, "Opcode22", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode23Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 23, "Opcode23", ProviderGuid, ProviderName);
        }
        static private W3SendResponse IIS_TransOpcode24Template(Action<W3SendResponse> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3SendResponse(action, 10000, 0, "IIS_Trans", IISTransGuid, 24, "Opcode24", ProviderGuid, ProviderName);
        }
        static private W3GeneralGetURLMetadata IIS_TransOpcode30Template(Action<W3GeneralGetURLMetadata> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralGetURLMetadata(action, 10000, 0, "IIS_Trans", IISTransGuid, 30, "Opcode30", ProviderGuid, ProviderName);
        }
        static private W3GeneralChildRequestStart IIS_TransOpcode31Template(Action<W3GeneralChildRequestStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralChildRequestStart(action, 10000, 0, "IIS_Trans", IISTransGuid, 31, "Opcode31", ProviderGuid, ProviderName);
        }
        static private W3GeneralChildRequestEnd IIS_TransOpcode32Template(Action<W3GeneralChildRequestEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralChildRequestEnd(action, 10000, 0, "IIS_Trans", IISTransGuid, 32, "Opcode32", ProviderGuid, ProviderName);
        }
        static private W3GeneralSendCustomError IIS_TransOpcode33Template(Action<W3GeneralSendCustomError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralSendCustomError(action, 10000, 0, "IIS_Trans", IISTransGuid, 33, "Opcode33", ProviderGuid, ProviderName);
        }
        static private W3GeneralMapHandler IIS_TransOpcode34Template(Action<W3GeneralMapHandler> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralMapHandler(action, 10000, 0, "IIS_Trans", IISTransGuid, 34, "Opcode34", ProviderGuid, ProviderName);
        }
        static private W3GeneralFlushResponseStart IIS_TransOpcode35Template(Action<W3GeneralFlushResponseStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralFlushResponseStart(action, 10000, 0, "IIS_Trans", IISTransGuid, 35, "Opcode35", ProviderGuid, ProviderName);
        }
        static private W3GeneralFlushResponseEnd IIS_TransOpcode36Template(Action<W3GeneralFlushResponseEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralFlushResponseEnd(action, 10000, 0, "IIS_Trans", IISTransGuid, 36, "Opcode36", ProviderGuid, ProviderName);
        }
        static private W3GeneralReadEntityStart IIS_TransOpcode37Template(Action<W3GeneralReadEntityStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralReadEntityStart(action, 10000, 0, "IIS_Trans", IISTransGuid, 37, "Opcode37", ProviderGuid, ProviderName);
        }
        static private W3GeneralReadEntityEnd IIS_TransOpcode38Template(Action<W3GeneralReadEntityEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralReadEntityEnd(action, 10000, 0, "IIS_Trans", IISTransGuid, 38, "Opcode38", ProviderGuid, ProviderName);
        }
        static private IISGeneralFileChangeNotification IIS_TransOpcode39Template(Action<IISGeneralFileChangeNotification> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralFileChangeNotification(action, 10000, 0, "IIS_Trans", IISTransGuid, 39, "Opcode39", ProviderGuid, ProviderName);
        }
        static private IISGeneralConfigChangeNotification IIS_TransOpcode40Template(Action<IISGeneralConfigChangeNotification> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralConfigChangeNotification(action, 10000, 0, "IIS_Trans", IISTransGuid, 40, "Opcode40", ProviderGuid, ProviderName);
        }
        static private IISGeneralVirtualModuleUnresolved IIS_TransOpcode41Template(Action<IISGeneralVirtualModuleUnresolved> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralVirtualModuleUnresolved(action, 10000, 0, "IIS_Trans", IISTransGuid, 41, "Opcode41", ProviderGuid, ProviderName);
        }
        static private IISGeneralUrlChanged IIS_TransOpcode42Template(Action<IISGeneralUrlChanged> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralUrlChanged(action, 10000, 0, "IIS_Trans", IISTransGuid, 42, "Opcode42", ProviderGuid, ProviderName);
        }
        static private IISGeneralHandlerChanged IIS_TransOpcode43Template(Action<IISGeneralHandlerChanged> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralHandlerChanged(action, 10000, 0, "IIS_Trans", IISTransGuid, 43, "Opcode43", ProviderGuid, ProviderName);
        }
        static private IISGeneralUserSet IIS_TransOpcode44Template(Action<IISGeneralUserSet> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralUserSet(action, 10000, 0, "IIS_Trans", IISTransGuid, 44, "Opcode44", ProviderGuid, ProviderName);
        }
        static private IISGeneralModulePreconditionNotMatch IIS_TransOpcode45Template(Action<IISGeneralModulePreconditionNotMatch> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralModulePreconditionNotMatch(action, 10000, 0, "IIS_Trans", IISTransGuid, 45, "Opcode45", ProviderGuid, ProviderName);
        }
        static private IISGeneralHandlerPreconditionNotMatch IIS_TransOpcode46Template(Action<IISGeneralHandlerPreconditionNotMatch> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISGeneralHandlerPreconditionNotMatch(action, 10000, 0, "IIS_Trans", IISTransGuid, 46, "Opcode46", ProviderGuid, ProviderName);
        }
        static private W3GeneralResponseHeaders IIS_TransOpcode47Template(Action<W3GeneralResponseHeaders> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralResponseHeaders(action, 10000, 0, "IIS_Trans", IISTransGuid, 47, "Opcode47", ProviderGuid, ProviderName);
        }
        static private W3GeneralResponseEntityFile IIS_TransOpcode48Template(Action<W3GeneralResponseEntityFile> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralResponseEntityFile(action, 10000, 0, "IIS_Trans", IISTransGuid, 48, "Opcode48", ProviderGuid, ProviderName);
        }
        static private W3GeneralResponseEntityBuffer IIS_TransOpcode49Template(Action<W3GeneralResponseEntityBuffer> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralResponseEntityBuffer(action, 10000, 0, "IIS_Trans", IISTransGuid, 49, "Opcode49", ProviderGuid, ProviderName);
        }
        static private W3GeneralRequestHeaders IIS_TransOpcode50Template(Action<W3GeneralRequestHeaders> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralRequestHeaders(action, 10000, 0, "IIS_Trans", IISTransGuid, 50, "Opcode50", ProviderGuid, ProviderName);
        }
        static private W3GeneralRequestEntity IIS_TransOpcode51Template(Action<W3GeneralRequestEntity> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralRequestEntity(action, 10000, 0, "IIS_Trans", IISTransGuid, 51, "Opcode51", ProviderGuid, ProviderName);
        }
        static private W3GeneralNotSendCustomError IIS_TransOpcode52Template(Action<W3GeneralNotSendCustomError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralNotSendCustomError(action, 10000, 0, "IIS_Trans", IISTransGuid, 52, "Opcode52", ProviderGuid, ProviderName);
        }
        static private W3GeneralSetRequestHeader IIS_TransOpcode53Template(Action<W3GeneralSetRequestHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralSetRequestHeader(action, 10000, 0, "IIS_Trans", IISTransGuid, 53, "Opcode53", ProviderGuid, ProviderName);
        }
        static private W3GeneralModuleFactoryFailed IIS_TransOpcode54Template(Action<W3GeneralModuleFactoryFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralModuleFactoryFailed(action, 10000, 0, "IIS_Trans", IISTransGuid, 54, "Opcode54", ProviderGuid, ProviderName);
        }
        static private W3GeneralEndpointInformation IIS_TransOpcode55Template(Action<W3GeneralEndpointInformation> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralEndpointInformation(action, 10000, 0, "IIS_Trans", IISTransGuid, 55, "Opcode55", ProviderGuid, ProviderName);
        }
        static private W3GeneralSetResponseHeader IIS_TransOpcode56Template(Action<W3GeneralSetResponseHeader> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralSetResponseHeader(action, 10000, 0, "IIS_Trans", IISTransGuid, 56, "Opcode56", ProviderGuid, ProviderName);
        }
        static private W3GeneralStartNewRequest IIS_TransStartTemplate(Action<W3GeneralStartNewRequest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralStartNewRequest(action, 10000, 0, "IIS_Trans", IISTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3GeneralEndNewRequest IIS_TransStopTemplate(Action<W3GeneralEndNewRequest> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3GeneralEndNewRequest(action, 10000, 0, "IIS_Trans", IISTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3WebSocketEndSuccess IIS_WebSocket_TransDC_StartTemplate(Action<W3WebSocketEndSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketEndSuccess(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private W3WebSocketEndFailure IIS_WebSocket_TransDC_StopTemplate(Action<W3WebSocketEndFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketEndFailure(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private W3WebSocketReadFragmentStart IIS_WebSocket_TransExtensionTemplate(Action<W3WebSocketReadFragmentStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketReadFragmentStart(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private W3WebSocketWriteFragmentEndPending IIS_WebSocket_TransOpcode10Template(Action<W3WebSocketWriteFragmentEndPending> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketWriteFragmentEndPending(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private W3WebSocketWriteFragmentEndSuccess IIS_WebSocket_TransOpcode11Template(Action<W3WebSocketWriteFragmentEndSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketWriteFragmentEndSuccess(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private W3WebSocketWriteFragmentEndFailure IIS_WebSocket_TransOpcode12Template(Action<W3WebSocketWriteFragmentEndFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketWriteFragmentEndFailure(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private W3WebSocketApplicationCloseConnection IIS_WebSocket_TransOpcode13Template(Action<W3WebSocketApplicationCloseConnection> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketApplicationCloseConnection(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private W3WebSocketModuleCloseConnection IIS_WebSocket_TransOpcode14Template(Action<W3WebSocketModuleCloseConnection> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketModuleCloseConnection(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private W3WebSocketReadIoFailed IIS_WebSocket_TransOpcode15Template(Action<W3WebSocketReadIoFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketReadIoFailed(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3WebSocketWriteIoFailed IIS_WebSocket_TransOpcode16Template(Action<W3WebSocketWriteIoFailed> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketWriteIoFailed(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private W3WebSocketCloseReceived IIS_WebSocket_TransOpcode17Template(Action<W3WebSocketCloseReceived> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketCloseReceived(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private W3WebSocketCloseSendStart IIS_WebSocket_TransOpcode18Template(Action<W3WebSocketCloseSendStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketCloseSendStart(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private W3WebSocketCloseSendSuccess IIS_WebSocket_TransOpcode19Template(Action<W3WebSocketCloseSendSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketCloseSendSuccess(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 19, "Opcode19", ProviderGuid, ProviderName);
        }
        static private W3WebSocketCloseSendFailure IIS_WebSocket_TransOpcode20Template(Action<W3WebSocketCloseSendFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketCloseSendFailure(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 20, "Opcode20", ProviderGuid, ProviderName);
        }
        static private W3WebSocketReadFragmentEndPending IIS_WebSocket_TransReplyTemplate(Action<W3WebSocketReadFragmentEndPending> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketReadFragmentEndPending(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 6, "Reply", ProviderGuid, ProviderName);
        }
        static private W3WebSocketReadFragmentEndSuccess IIS_WebSocket_TransResumeTemplate(Action<W3WebSocketReadFragmentEndSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketReadFragmentEndSuccess(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 7, "Resume", ProviderGuid, ProviderName);
        }
        static private W3WebSocketWriteFragmentStart IIS_WebSocket_TransSendTemplate(Action<W3WebSocketWriteFragmentStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketWriteFragmentStart(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 9, "Send", ProviderGuid, ProviderName);
        }
        static private W3WebSocketInitializeNotSuccess IIS_WebSocket_TransStartTemplate(Action<W3WebSocketInitializeNotSuccess> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketInitializeNotSuccess(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3WebSocketStart IIS_WebSocket_TransStopTemplate(Action<W3WebSocketStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketStart(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private W3WebSocketReadFragmentEndFailure IIS_WebSocket_TransSuspendTemplate(Action<W3WebSocketReadFragmentEndFailure> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3WebSocketReadFragmentEndFailure(action, 10007, 8, "IIS_WebSocket_Trans", IISWebSocketTransGuid, 8, "Suspend", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleCriticalError IISModuleEventsDC_StartTemplate(Action<IISModuleEventsModuleCriticalError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleCriticalError(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleError IISModuleEventsDC_StopTemplate(Action<IISModuleEventsModuleError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleError(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleWarning IISModuleEventsExtensionTemplate(Action<IISModuleEventsModuleWarning> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleWarning(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleInformation IISModuleEventsReplyTemplate(Action<IISModuleEventsModuleInformation> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleInformation(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 6, "Reply", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleVerbose IISModuleEventsResumeTemplate(Action<IISModuleEventsModuleVerbose> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleVerbose(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 7, "Resume", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleStart IISModuleEventsStartTemplate(Action<IISModuleEventsModuleStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleStart(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private IISModuleEventsModuleEnd IISModuleEventsStopTemplate(Action<IISModuleEventsModuleEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISModuleEventsModuleEnd(action, 10011, 12, "IISModuleEvents", IISModuleEventsGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsCompletion IISRequestNotificationEventsDC_StartTemplate(Action<IISRequestNotificationEventsCompletion> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsCompletion(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 3, "DC_Start", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationPreBeginStart IISRequestNotificationEventsDC_StopTemplate(Action<IISRequestNotificationPreBeginStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationPreBeginStart(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 4, "DC_Stop", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationPreBeginEnd IISRequestNotificationEventsExtensionTemplate(Action<IISRequestNotificationPreBeginEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationPreBeginEnd(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 5, "Extension", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsError IISRequestNotificationEventsOpcode15Template(Action<IISRequestNotificationEventsError> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsError(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsResponseErrorStatus IISRequestNotificationEventsOpcode16Template(Action<IISRequestNotificationEventsResponseErrorStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsResponseErrorStatus(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 16, "Opcode16", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsResponseSuccessStatus IISRequestNotificationEventsOpcode17Template(Action<IISRequestNotificationEventsResponseSuccessStatus> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsResponseSuccessStatus(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 17, "Opcode17", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsResponseErrorDescription IISRequestNotificationEventsOpcode18Template(Action<IISRequestNotificationEventsResponseErrorDescription> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsResponseErrorDescription(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 18, "Opcode18", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsStart IISRequestNotificationEventsStartTemplate(Action<IISRequestNotificationEventsStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsStart(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private IISRequestNotificationEventsEnd IISRequestNotificationEventsStopTemplate(Action<IISRequestNotificationEventsEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IISRequestNotificationEventsEnd(action, 10010, 11, "IISRequestNotificationEvents", IISRequestNotificationEventsGuid, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode10Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 10, "Opcode10", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode11Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 11, "Opcode11", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode12Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 12, "Opcode12", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode13Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 13, "Opcode13", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode14Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 14, "Opcode14", ProviderGuid, ProviderName);
        }
        static private IsapiDeleteContext Isapi_TransOpcode15Template(Action<IsapiDeleteContext> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new IsapiDeleteContext(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 15, "Opcode15", ProviderGuid, ProviderName);
        }
        static private W3ISAPIStart Isapi_TransStartTemplate(Action<W3ISAPIStart> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3ISAPIStart(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 1, "Start", ProviderGuid, ProviderName);
        }
        static private W3ISAPIEnd Isapi_TransStopTemplate(Action<W3ISAPIEnd> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new W3ISAPIEnd(action, 10004, 5, "Isapi_Trans", IsapiTransGuid, 2, "Stop", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected internal override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[202];
                templates[0] = IIS_TransStartTemplate(null);
                templates[1] = IIS_TransStopTemplate(null);
                templates[2] = IIS_TransOpcode10Template(null);
                templates[3] = IIS_TransOpcode11Template(null);
                templates[4] = IIS_TransOpcode12Template(null);
                templates[5] = IIS_TransOpcode13Template(null);
                templates[6] = IIS_TransOpcode14Template(null);
                templates[7] = IIS_TransOpcode15Template(null);
                templates[8] = IIS_TransOpcode16Template(null);
                templates[9] = IIS_TransOpcode17Template(null);
                templates[10] = IIS_TransOpcode30Template(null);
                templates[11] = IIS_TransOpcode31Template(null);
                templates[12] = IIS_TransOpcode32Template(null);
                templates[13] = IIS_TransOpcode33Template(null);
                templates[14] = IIS_TransOpcode34Template(null);
                templates[15] = IIS_TransOpcode35Template(null);
                templates[16] = IIS_TransOpcode36Template(null);
                templates[17] = IIS_TransOpcode37Template(null);
                templates[18] = IIS_TransOpcode38Template(null);
                templates[19] = IIS_TransOpcode39Template(null);
                templates[20] = IIS_TransOpcode40Template(null);
                templates[21] = IIS_TransOpcode41Template(null);
                templates[22] = IIS_TransOpcode42Template(null);
                templates[23] = IIS_TransOpcode43Template(null);
                templates[24] = IIS_TransOpcode44Template(null);
                templates[25] = IIS_TransOpcode45Template(null);
                templates[26] = IIS_TransOpcode46Template(null);
                templates[27] = IIS_TransOpcode47Template(null);
                templates[28] = IIS_TransOpcode48Template(null);
                templates[29] = IIS_TransOpcode49Template(null);
                templates[30] = IIS_TransOpcode50Template(null);
                templates[31] = IIS_TransOpcode51Template(null);
                templates[32] = IIS_TransOpcode52Template(null);
                templates[33] = IIS_TransOpcode53Template(null);
                templates[34] = IIS_TransOpcode54Template(null);
                templates[35] = IIS_TransOpcode55Template(null);
                templates[36] = IIS_TransOpcode56Template(null);
                templates[37] = IIS_Authentication_TransOpcode10Template(null);
                templates[38] = IIS_Authentication_TransOpcode11Template(null);
                templates[39] = IIS_Authentication_TransOpcode12Template(null);
                templates[40] = IIS_Authentication_TransOpcode13Template(null);
                templates[41] = IIS_Authentication_TransOpcode14Template(null);
                templates[42] = IIS_Authentication_TransOpcode15Template(null);
                templates[43] = IIS_Authentication_TransOpcode16Template(null);
                templates[44] = IIS_Authentication_TransOpcode17Template(null);
                templates[45] = IIS_Authentication_TransOpcode18Template(null);
                templates[46] = IIS_Authentication_TransOpcode19Template(null);
                templates[47] = IIS_Authentication_TransOpcode20Template(null);
                templates[48] = IIS_Authentication_TransOpcode21Template(null);
                templates[49] = IIS_Authentication_TransOpcode22Template(null);
                templates[50] = IIS_Authentication_TransOpcode23Template(null);
                templates[51] = IIS_Authentication_TransOpcode55Template(null);
                templates[52] = IIS_Authentication_TransOpcode24Template(null);
                templates[53] = IIS_Authentication_TransOpcode27Template(null);
                templates[54] = IIS_Authentication_TransOpcode28Template(null);
                templates[55] = IIS_Security_TransOpcode10Template(null);
                templates[56] = IIS_Security_TransOpcode11Template(null);
                templates[57] = IIS_Security_TransOpcode12Template(null);
                templates[58] = IIS_Security_TransOpcode13Template(null);
                templates[59] = IIS_Security_TransOpcode14Template(null);
                templates[60] = IIS_Security_TransOpcode15Template(null);
                templates[61] = IIS_Security_TransOpcode16Template(null);
                templates[62] = IIS_Security_TransOpcode17Template(null);
                templates[63] = IIS_Security_TransOpcode18Template(null);
                templates[64] = IIS_Filter_TransStartTemplate(null);
                templates[65] = IIS_Filter_TransStopTemplate(null);
                templates[66] = IIS_Filter_TransOpcode12Template(null);
                templates[67] = IIS_Filter_TransOpcode13Template(null);
                templates[68] = IIS_Filter_TransOpcode14Template(null);
                templates[69] = IIS_Filter_TransOpcode15Template(null);
                templates[70] = IIS_Filter_TransOpcode16Template(null);
                templates[71] = IIS_Filter_TransOpcode17Template(null);
                templates[72] = IIS_Filter_TransOpcode18Template(null);
                templates[73] = IIS_Filter_TransOpcode19Template(null);
                templates[74] = IIS_Filter_TransOpcode20Template(null);
                templates[75] = IIS_Filter_TransOpcode21Template(null);
                templates[76] = IIS_Filter_TransOpcode22Template(null);
                templates[77] = IIS_Filter_TransOpcode23Template(null);
                templates[78] = IIS_Filter_TransOpcode24Template(null);
                templates[79] = IIS_Filter_TransOpcode25Template(null);
                templates[80] = IIS_Filter_TransOpcode26Template(null);
                templates[81] = IIS_Filter_TransOpcode27Template(null);
                templates[82] = IIS_Filter_TransOpcode28Template(null);
                templates[83] = IIS_Filter_TransOpcode29Template(null);
                templates[84] = IIS_Filter_TransOpcode30Template(null);
                templates[85] = IIS_Filter_TransOpcode31Template(null);
                templates[86] = IIS_Filter_TransOpcode32Template(null);
                templates[87] = IIS_Filter_TransOpcode33Template(null);
                templates[88] = IIS_Filter_TransOpcode34Template(null);
                templates[89] = Isapi_TransStartTemplate(null);
                templates[90] = Isapi_TransStopTemplate(null);
                templates[91] = IIS_Cgi_TransStartTemplate(null);
                templates[92] = IIS_Cgi_TransStopTemplate(null);
                templates[93] = IIS_Cgi_TransDC_StartTemplate(null);
                templates[94] = IIS_Cgi_TransDC_StopTemplate(null);
                templates[95] = IIS_Cgi_TransExtensionTemplate(null);
                templates[96] = IIS_Cgi_TransReplyTemplate(null);
                templates[97] = IIS_Cgi_TransResumeTemplate(null);
                templates[98] = IIS_FastCgi_TransStartTemplate(null);
                templates[99] = IIS_FastCgi_TransStopTemplate(null);
                templates[100] = IIS_FastCgi_TransDC_StartTemplate(null);
                templates[101] = IIS_FastCgi_TransDC_StopTemplate(null);
                templates[102] = IIS_FastCgi_TransExtensionTemplate(null);
                templates[103] = IIS_FastCgi_TransReplyTemplate(null);
                templates[104] = IIS_FastCgi_TransResumeTemplate(null);
                templates[105] = IIS_FastCgi_TransSuspendTemplate(null);
                templates[106] = IIS_FastCgi_TransSendTemplate(null);
                templates[107] = IIS_FastCgi_TransOpcode10Template(null);
                templates[108] = IIS_FastCgi_TransOpcode11Template(null);
                templates[109] = IIS_FastCgi_TransOpcode12Template(null);
                templates[110] = IIS_FastCgi_TransOpcode13Template(null);
                templates[111] = IIS_FastCgi_TransOpcode14Template(null);
                templates[112] = IIS_FastCgi_TransOpcode15Template(null);
                templates[113] = IIS_FastCgi_TransOpcode16Template(null);
                templates[114] = IIS_FastCgi_TransOpcode17Template(null);
                templates[115] = IIS_FastCgi_TransOpcode18Template(null);
                templates[116] = IIS_FastCgi_TransOpcode19Template(null);
                templates[117] = IIS_WebSocket_TransStartTemplate(null);
                templates[118] = IIS_WebSocket_TransStopTemplate(null);
                templates[119] = IIS_WebSocket_TransDC_StartTemplate(null);
                templates[120] = IIS_WebSocket_TransDC_StopTemplate(null);
                templates[121] = IIS_WebSocket_TransExtensionTemplate(null);
                templates[122] = IIS_WebSocket_TransReplyTemplate(null);
                templates[123] = IIS_WebSocket_TransResumeTemplate(null);
                templates[124] = IIS_WebSocket_TransSuspendTemplate(null);
                templates[125] = IIS_WebSocket_TransSendTemplate(null);
                templates[126] = IIS_WebSocket_TransOpcode10Template(null);
                templates[127] = IIS_WebSocket_TransOpcode11Template(null);
                templates[128] = IIS_WebSocket_TransOpcode12Template(null);
                templates[129] = IIS_WebSocket_TransOpcode13Template(null);
                templates[130] = IIS_WebSocket_TransOpcode14Template(null);
                templates[131] = IIS_WebSocket_TransOpcode15Template(null);
                templates[132] = IIS_WebSocket_TransOpcode16Template(null);
                templates[133] = IIS_WebSocket_TransOpcode17Template(null);
                templates[134] = IIS_WebSocket_TransOpcode18Template(null);
                templates[135] = IIS_WebSocket_TransOpcode19Template(null);
                templates[136] = IIS_WebSocket_TransOpcode20Template(null);
                templates[137] = IIS_Compression_TransStartTemplate(null);
                templates[138] = IIS_Compression_TransStopTemplate(null);
                templates[139] = IIS_Compression_TransDC_StartTemplate(null);
                templates[140] = IIS_Compression_TransDC_StopTemplate(null);
                templates[141] = IIS_Compression_TransExtensionTemplate(null);
                templates[142] = IIS_Compression_TransReplyTemplate(null);
                templates[143] = IIS_Compression_TransResumeTemplate(null);
                templates[144] = IIS_Compression_TransSuspendTemplate(null);
                templates[145] = IIS_Compression_TransSendTemplate(null);
                templates[146] = IIS_Compression_TransOpcode10Template(null);
                templates[147] = IIS_Compression_TransOpcode11Template(null);
                templates[148] = IIS_Cache_TransOpcode10Template(null);
                templates[149] = IIS_Cache_TransOpcode11Template(null);
                templates[150] = IIS_Cache_TransOpcode12Template(null);
                templates[151] = IIS_Cache_TransOpcode13Template(null);
                templates[152] = IIS_Cache_TransOpcode14Template(null);
                templates[153] = IIS_Cache_TransOpcode15Template(null);
                templates[154] = IIS_Cache_TransOpcode16Template(null);
                templates[155] = IIS_Cache_TransOpcode17Template(null);
                templates[156] = IIS_Cache_TransOpcode18Template(null);
                templates[157] = IIS_Cache_TransOpcode19Template(null);
                templates[158] = IIS_Cache_TransOpcode20Template(null);
                templates[159] = IISRequestNotificationEventsStartTemplate(null);
                templates[160] = IISRequestNotificationEventsStopTemplate(null);
                templates[161] = IISRequestNotificationEventsDC_StartTemplate(null);
                templates[162] = IISRequestNotificationEventsDC_StopTemplate(null);
                templates[163] = IISRequestNotificationEventsExtensionTemplate(null);
                templates[164] = IISRequestNotificationEventsOpcode15Template(null);
                templates[165] = IISRequestNotificationEventsOpcode16Template(null);
                templates[166] = IISRequestNotificationEventsOpcode17Template(null);
                templates[167] = IISRequestNotificationEventsOpcode18Template(null);
                templates[168] = IISModuleEventsStartTemplate(null);
                templates[169] = IISModuleEventsStopTemplate(null);
                templates[170] = IISModuleEventsDC_StartTemplate(null);
                templates[171] = IISModuleEventsDC_StopTemplate(null);
                templates[172] = IISModuleEventsExtensionTemplate(null);
                templates[173] = IISModuleEventsReplyTemplate(null);
                templates[174] = IISModuleEventsResumeTemplate(null);
                templates[175] = IIS_TransStartTemplate(null);
                templates[176] = IIS_TransStopTemplate(null);
                templates[177] = IIS_TransOpcode16Template(null);
                templates[178] = IIS_TransOpcode17Template(null);
                templates[179] = IIS_TransOpcode18Template(null);
                templates[180] = IIS_TransOpcode19Template(null);
                templates[181] = IIS_TransOpcode20Template(null);
                templates[182] = IIS_TransOpcode21Template(null);
                templates[183] = IIS_TransOpcode22Template(null);
                templates[184] = IIS_TransOpcode23Template(null);
                templates[185] = IIS_TransOpcode24Template(null);
                templates[186] = IIS_TransOpcode10Template(null);
                templates[187] = IIS_TransOpcode11Template(null);
                templates[188] = IIS_TransOpcode12Template(null);
                templates[189] = IIS_TransOpcode13Template(null);
                templates[190] = IIS_Filter_TransStartTemplate(null);
                templates[191] = IIS_Filter_TransStopTemplate(null);
                templates[192] = IIS_Cgi_TransStartTemplate(null);
                templates[193] = IIS_Cgi_TransStopTemplate(null);
                templates[194] = Isapi_TransStartTemplate(null);
                templates[195] = Isapi_TransStopTemplate(null);
                templates[196] = Isapi_TransOpcode10Template(null);
                templates[197] = Isapi_TransOpcode11Template(null);
                templates[198] = Isapi_TransOpcode12Template(null);
                templates[199] = Isapi_TransOpcode13Template(null);
                templates[200] = Isapi_TransOpcode14Template(null);
                templates[201] = Isapi_TransOpcode15Template(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.IIS_Trace
{
    public sealed class W3AuthStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int AuthTypeSupported { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthStart(Action<W3AuthStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "AuthTypeSupported", AuthTypeSupported);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthTypeSupported" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthTypeSupported;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthStart> m_target;
        #endregion
    }
    public sealed class W3AuthSucceeded : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int AuthType { get { return GetInt32At(16); } }
        public bool NTLMUsed { get { return GetInt32At(20) != 0; } }
        public string RemoteUserName { get { return GetUnicodeStringAt(24); } }
        public string AuthUserName { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public int TokenImpersonationLevel { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(24))); } }

        #region Private
        internal W3AuthSucceeded(Action<W3AuthSucceeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(24)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(24)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthSucceeded>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "AuthType", AuthType);
            XmlAttrib(sb, "NTLMUsed", NTLMUsed);
            XmlAttrib(sb, "RemoteUserName", RemoteUserName);
            XmlAttrib(sb, "AuthUserName", AuthUserName);
            XmlAttrib(sb, "TokenImpersonationLevel", TokenImpersonationLevel);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthType", "NTLMUsed", "RemoteUserName", "AuthUserName", "TokenImpersonationLevel" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthType;
                case 2:
                    return NTLMUsed;
                case 3:
                    return RemoteUserName;
                case 4:
                    return AuthUserName;
                case 5:
                    return TokenImpersonationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthSucceeded> m_target;
        #endregion
    }
    public sealed class W3AuthTypeNotSupported : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthTypeNotSupported(Action<W3AuthTypeNotSupported> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthTypeNotSupported>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthTypeNotSupported> m_target;
        #endregion
    }
    public sealed class W3AuthInvalidAnonAccount : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthInvalidAnonAccount(Action<W3AuthInvalidAnonAccount> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthInvalidAnonAccount>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthInvalidAnonAccount> m_target;
        #endregion
    }
    public sealed class W3AuthPasswdChangeNeeded : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthPasswdChangeNeeded(Action<W3AuthPasswdChangeNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthPasswdChangeNeeded>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthPasswdChangeNeeded> m_target;
        #endregion
    }
    public sealed class W3AuthPasswdChangeDisabled : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthPasswdChangeDisabled(Action<W3AuthPasswdChangeDisabled> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthPasswdChangeDisabled>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthPasswdChangeDisabled> m_target;
        #endregion
    }
    public sealed class W3AuthBadBasicHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthBadBasicHeader(Action<W3AuthBadBasicHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthBadBasicHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthBadBasicHeader> m_target;
        #endregion
    }
    public sealed class W3AuthBasicLogonFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthBasicLogonFailed(Action<W3AuthBasicLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthBasicLogonFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthBasicLogonFailed> m_target;
        #endregion
    }
    public sealed class W3AuthWDigestLogonFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthWDigestLogonFailed(Action<W3AuthWDigestLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthWDigestLogonFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthWDigestLogonFailed> m_target;
        #endregion
    }
    public sealed class W3AuthIISDigestLogonFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthIISDigestLogonFailed(Action<W3AuthIISDigestLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthIISDigestLogonFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthIISDigestLogonFailed> m_target;
        #endregion
    }
    public sealed class W3AuthPassportLogonFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthPassportLogonFailed(Action<W3AuthPassportLogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthPassportLogonFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthPassportLogonFailed> m_target;
        #endregion
    }
    public sealed class W3AuthSSPILogonFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthSSPILogonFailed(Action<W3AuthSSPILogonFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthSSPILogonFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthSSPILogonFailed> m_target;
        #endregion
    }
    public sealed class W3AuthNTLMNullSession : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthNTLMNullSession(Action<W3AuthNTLMNullSession> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthNTLMNullSession>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthNTLMNullSession> m_target;
        #endregion
    }
    public sealed class W3AuthSSPIContinueNeeded : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PackageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3AuthSSPIContinueNeeded(Action<W3AuthSSPIContinueNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthSSPIContinueNeeded>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "PackageName", PackageName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PackageName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PackageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthSSPIContinueNeeded> m_target;
        #endregion
    }
    public sealed class W3AuthAnonPasswdChangeNeeded : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthAnonPasswdChangeNeeded(Action<W3AuthAnonPasswdChangeNeeded> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthAnonPasswdChangeNeeded>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthAnonPasswdChangeNeeded> m_target;
        #endregion
    }
    public sealed class W3AuthRequestAuthType : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int RequestAuthType { get { return GetInt32At(16); } }

        #region Private
        internal W3AuthRequestAuthType(Action<W3AuthRequestAuthType> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthRequestAuthType>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestAuthType", RequestAuthType);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestAuthType" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestAuthType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthRequestAuthType> m_target;
        #endregion
    }
    public sealed class W3AuthEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3AuthEnd(Action<W3AuthEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthEnd> m_target;
        #endregion
    }
    public sealed class W3AuthKerberosFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool KMUsed { get { return GetInt32At(16) != 0; } }
        public string APUserName { get { return GetUnicodeStringAt(20); } }
        public string SPNName { get { return GetUnicodeStringAt(SkipUnicodeString(20)); } }
        public bool ADConfigIsOK { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(20))) != 0; } }
        public string KerberosInfo { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(20)) + 4); } }

        #region Private
        internal W3AuthKerberosFailed(Action<W3AuthKerberosFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(20)) + 4)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(20)) + 4)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3AuthKerberosFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "KMUsed", KMUsed);
            XmlAttrib(sb, "APUserName", APUserName);
            XmlAttrib(sb, "SPNName", SPNName);
            XmlAttrib(sb, "ADConfigIsOK", ADConfigIsOK);
            XmlAttrib(sb, "KerberosInfo", KerberosInfo);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "KMUsed", "APUserName", "SPNName", "ADConfigIsOK", "KerberosInfo" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return KMUsed;
                case 2:
                    return APUserName;
                case 3:
                    return SPNName;
                case 4:
                    return ADConfigIsOK;
                case 5:
                    return KerberosInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3AuthKerberosFailed> m_target;
        #endregion
    }
    public sealed class W3CacheFileCacheAccessStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal W3CacheFileCacheAccessStart(Action<W3CacheFileCacheAccessStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheFileCacheAccessStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "UserName", UserName);
            XmlAttrib(sb, "DomainName", DomainName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "UserName", "DomainName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return UserName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheFileCacheAccessStart> m_target;
        #endregion
    }
    public sealed class W3CacheFileCacheAccessEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool Successful { get { return GetInt32At(16) != 0; } }
        public bool FileFromCache { get { return GetInt32At(20) != 0; } }
        public bool FileAddedToCache { get { return GetInt32At(24) != 0; } }
        public bool FileDirmoned { get { return GetInt32At(28) != 0; } }
        public bool LastModCheckErrorIgnored { get { return GetInt32At(32) != 0; } }
        public int ErrorCode { get { return GetInt32At(36); } }
        public string LastModifiedTime { get { return GetUTF8StringAt(40); } }

        #region Private
        internal W3CacheFileCacheAccessEnd(Action<W3CacheFileCacheAccessEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(40)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(40)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheFileCacheAccessEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Successful", Successful);
            XmlAttrib(sb, "FileFromCache", FileFromCache);
            XmlAttrib(sb, "FileAddedToCache", FileAddedToCache);
            XmlAttrib(sb, "FileDirmoned", FileDirmoned);
            XmlAttrib(sb, "LastModCheckErrorIgnored", LastModCheckErrorIgnored);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            XmlAttrib(sb, "LastModifiedTime", LastModifiedTime);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Successful", "FileFromCache", "FileAddedToCache", "FileDirmoned", "LastModCheckErrorIgnored", "ErrorCode", "LastModifiedTime" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Successful;
                case 2:
                    return FileFromCache;
                case 3:
                    return FileAddedToCache;
                case 4:
                    return FileDirmoned;
                case 5:
                    return LastModCheckErrorIgnored;
                case 6:
                    return ErrorCode;
                case 7:
                    return LastModifiedTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheFileCacheAccessEnd> m_target;
        #endregion
    }
    public sealed class W3CacheURLCacheAccessStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RequestURL { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3CacheURLCacheAccessStart(Action<W3CacheURLCacheAccessStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheURLCacheAccessStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestURL", RequestURL);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestURL" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheURLCacheAccessStart> m_target;
        #endregion
    }
    public sealed class W3CacheURLCacheAccessEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUnicodeStringAt(16); } }
        public bool URLInfoFromCache { get { return GetInt32At(SkipUnicodeString(16)) != 0; } }
        public bool URLInfoAddedToCache { get { return GetInt32At(SkipUnicodeString(16) + 4) != 0; } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16) + 8); } }

        #region Private
        internal W3CacheURLCacheAccessEnd(Action<W3CacheURLCacheAccessEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheURLCacheAccessEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "PhysicalPath", PhysicalPath);
            XmlAttrib(sb, "URLInfoFromCache", URLInfoFromCache);
            XmlAttrib(sb, "URLInfoAddedToCache", URLInfoAddedToCache);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath", "URLInfoFromCache", "URLInfoAddedToCache", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                case 2:
                    return URLInfoFromCache;
                case 3:
                    return URLInfoAddedToCache;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheURLCacheAccessEnd> m_target;
        #endregion
    }
    public sealed class W3CacheHttpsysCacheable : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public bool HttpsysCacheable { get { return GetInt32At(16) != 0; } }
        public int Reason { get { return GetInt32At(20); } }
        public int CachePolicy { get { return GetInt32At(24); } }
        public int TimeToLive { get { return GetInt32At(28); } }

        #region Private
        internal W3CacheHttpsysCacheable(Action<W3CacheHttpsysCacheable> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 32));
            Debug.Assert(!(Version > 1 && EventDataLength < 32));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheHttpsysCacheable>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HttpsysCacheable", HttpsysCacheable);
            XmlAttrib(sb, "Reason", Reason);
            XmlAttrib(sb, "CachePolicy", CachePolicy);
            XmlAttrib(sb, "TimeToLive", TimeToLive);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpsysCacheable", "Reason", "CachePolicy", "TimeToLive" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpsysCacheable;
                case 2:
                    return Reason;
                case 3:
                    return CachePolicy;
                case 4:
                    return TimeToLive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheHttpsysCacheable> m_target;
        #endregion
    }
    public sealed class W3OutputCacheLookupStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3OutputCacheLookupStart(Action<W3OutputCacheLookupStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3OutputCacheLookupStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3OutputCacheLookupStart> m_target;
        #endregion
    }
    public sealed class W3OutputCacheLookupEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Result { get { return GetInt32At(16); } }

        #region Private
        internal W3OutputCacheLookupEnd(Action<W3OutputCacheLookupEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3OutputCacheLookupEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Result", Result);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Result" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3OutputCacheLookupEnd> m_target;
        #endregion
    }
    public sealed class W3OutputCacheUpdateStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int CachePolicy { get { return GetInt32At(16); } }
        public int TimeToLive { get { return GetInt32At(20); } }

        #region Private
        internal W3OutputCacheUpdateStart(Action<W3OutputCacheUpdateStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3OutputCacheUpdateStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "CachePolicy", CachePolicy);
            XmlAttrib(sb, "TimeToLive", TimeToLive);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CachePolicy", "TimeToLive" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CachePolicy;
                case 2:
                    return TimeToLive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3OutputCacheUpdateStart> m_target;
        #endregion
    }
    public sealed class W3OutputCacheUpdateEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Result { get { return GetInt32At(16); } }

        #region Private
        internal W3OutputCacheUpdateEnd(Action<W3OutputCacheUpdateEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3OutputCacheUpdateEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Result", Result);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Result" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3OutputCacheUpdateEnd> m_target;
        #endregion
    }
    public sealed class W3OutputCacheDisabled : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3OutputCacheDisabled(Action<W3OutputCacheDisabled> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3OutputCacheDisabled>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3OutputCacheDisabled> m_target;
        #endregion
    }
    public sealed class W3CacheFileCacheCreateFile : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal W3CacheFileCacheCreateFile(Action<W3CacheFileCacheCreateFile> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CacheFileCacheCreateFile>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "UserName", UserName);
            XmlAttrib(sb, "DomainName", DomainName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "UserName", "DomainName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return UserName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CacheFileCacheCreateFile> m_target;
        #endregion
    }
    public sealed class W3CGILaunch : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string CommandLine { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(16) + 4); } }

        #region Private
        internal W3CGILaunch(Action<W3CGILaunch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGILaunch>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "CommandLine", CommandLine);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            XmlAttrib(sb, "ProcessId", ProcessId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CommandLine", "ErrorCode", "ProcessId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CommandLine;
                case 2:
                    return ErrorCode;
                case 3:
                    return ProcessId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGILaunch> m_target;
        #endregion
    }
    public sealed class W3CGITimeout : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3CGITimeout(Action<W3CGITimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGITimeout>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Headers", Headers);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGITimeout> m_target;
        #endregion
    }
    public sealed class W3CGIPrematureTermination : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3CGIPrematureTermination(Action<W3CGIPrematureTermination> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIPrematureTermination>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Headers", Headers);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIPrematureTermination> m_target;
        #endregion
    }
    public sealed class W3CGIRequestEntitySent : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIRequestEntitySent(Action<W3CGIRequestEntitySent> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIRequestEntitySent>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIRequestEntitySent> m_target;
        #endregion
    }
    public sealed class W3CGIHeadersReceived : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIHeadersReceived(Action<W3CGIHeadersReceived> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIHeadersReceived>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIHeadersReceived> m_target;
        #endregion
    }
    public sealed class W3CGIStart : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3CGIStart(Action<W3CGIStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIStart> m_target;
        #endregion
    }
    public sealed class W3CGIEnd : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3CGIEnd(Action<W3CGIEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIEnd> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionNotSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Reason { get { return GetInt32At(16); } }

        #region Private
        internal W3StaticCompressionNotSuccess(Action<W3StaticCompressionNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionNotSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionNotSuccess> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionCreateStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OriginalFileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3StaticCompressionCreateStart(Action<W3StaticCompressionCreateStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionCreateStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OriginalFileName", OriginalFileName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OriginalFileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OriginalFileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionCreateStart> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionCreateEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }
        public string OriginalFileName { get { return GetUnicodeStringAt(20); } }
        public int OriginalFileSize { get { return GetInt32At(SkipUnicodeString(20)); } }
        public string CompressedFileName { get { return GetUnicodeStringAt(SkipUnicodeString(20) + 4); } }
        public int CompressedFileSize { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(20) + 4)); } }

        #region Private
        internal W3StaticCompressionCreateEnd(Action<W3StaticCompressionCreateEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(20) + 4) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(20) + 4) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionCreateEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            XmlAttrib(sb, "OriginalFileName", OriginalFileName);
            XmlAttrib(sb, "OriginalFileSize", OriginalFileSize);
            XmlAttrib(sb, "CompressedFileName", CompressedFileName);
            XmlAttrib(sb, "CompressedFileSize", CompressedFileSize);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode", "OriginalFileName", "OriginalFileSize", "CompressedFileName", "CompressedFileSize" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                case 2:
                    return OriginalFileName;
                case 3:
                    return OriginalFileSize;
                case 4:
                    return CompressedFileName;
                case 5:
                    return CompressedFileSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionCreateEnd> m_target;
        #endregion
    }
    public sealed class W3DynamicCompressionEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3DynamicCompressionEnd(Action<W3DynamicCompressionEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3DynamicCompressionEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3DynamicCompressionEnd> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3StaticCompressionEnd(Action<W3StaticCompressionEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionEnd> m_target;
        #endregion
    }
    public sealed class W3DynamicCompressionStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3DynamicCompressionStart(Action<W3DynamicCompressionStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3DynamicCompressionStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3DynamicCompressionStart> m_target;
        #endregion
    }
    public sealed class W3DynamicCompressionSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3DynamicCompressionSuccess(Action<W3DynamicCompressionSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3DynamicCompressionSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3DynamicCompressionSuccess> m_target;
        #endregion
    }
    public sealed class W3DynamicCompressionDo : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int OriginalSize { get { return GetInt32At(16); } }
        public int CompressedSize { get { return GetInt32At(20); } }

        #region Private
        internal W3DynamicCompressionDo(Action<W3DynamicCompressionDo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3DynamicCompressionDo>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OriginalSize", OriginalSize);
            XmlAttrib(sb, "CompressedSize", CompressedSize);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OriginalSize", "CompressedSize" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OriginalSize;
                case 2:
                    return CompressedSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3DynamicCompressionDo> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3StaticCompressionStart(Action<W3StaticCompressionStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionStart> m_target;
        #endregion
    }
    public sealed class W3StaticCompressionSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3StaticCompressionSuccess(Action<W3StaticCompressionSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3StaticCompressionSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3StaticCompressionSuccess> m_target;
        #endregion
    }
    public sealed class W3DynamicCompressionNotSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Reason { get { return GetInt32At(16); } }

        #region Private
        internal W3DynamicCompressionNotSuccess(Action<W3DynamicCompressionNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3DynamicCompressionNotSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3DynamicCompressionNotSuccess> m_target;
        #endregion
    }
    public sealed class W3CGIFUnexpectedExit : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFUnexpectedExit(Action<W3CGIFUnexpectedExit> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFUnexpectedExit>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFUnexpectedExit> m_target;
        #endregion
    }
    public sealed class W3CGIFRapidFailureProtection : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFRapidFailureProtection(Action<W3CGIFRapidFailureProtection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFRapidFailureProtection>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFRapidFailureProtection> m_target;
        #endregion
    }
    public sealed class W3CGIFPathNotFound : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFPathNotFound(Action<W3CGIFPathNotFound> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFPathNotFound>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFPathNotFound> m_target;
        #endregion
    }
    public sealed class W3CGIFUnknownError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3CGIFUnknownError(Action<W3CGIFUnknownError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFUnknownError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFUnknownError> m_target;
        #endregion
    }
    public sealed class W3CGIFResponseWritten : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFResponseWritten(Action<W3CGIFResponseWritten> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFResponseWritten>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFResponseWritten> m_target;
        #endregion
    }
    public sealed class W3CGIFWaitingForResponse : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFWaitingForResponse(Action<W3CGIFWaitingForResponse> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFWaitingForResponse>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFWaitingForResponse> m_target;
        #endregion
    }
    public sealed class W3CGIFTraceError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3CGIFTraceError(Action<W3CGIFTraceError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFTraceError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Message", Message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFTraceError> m_target;
        #endregion
    }
    public sealed class W3CGIFTraceWarning : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3CGIFTraceWarning(Action<W3CGIFTraceWarning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFTraceWarning>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Message", Message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFTraceWarning> m_target;
        #endregion
    }
    public sealed class W3CGIFTraceInfo : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Message { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3CGIFTraceInfo(Action<W3CGIFTraceInfo> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFTraceInfo>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Message", Message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFTraceInfo> m_target;
        #endregion
    }
    public sealed class W3CGIFQueueRequest : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int PositionInQueue { get { return GetInt32At(16); } }
        public int MaxInstances { get { return GetInt32At(20); } }

        #region Private
        internal W3CGIFQueueRequest(Action<W3CGIFQueueRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFQueueRequest>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "PositionInQueue", PositionInQueue);
            XmlAttrib(sb, "MaxInstances", MaxInstances);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PositionInQueue", "MaxInstances" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PositionInQueue;
                case 2:
                    return MaxInstances;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFQueueRequest> m_target;
        #endregion
    }
    public sealed class W3CGIFAssignProcess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string CommandLine { get { return GetUnicodeStringAt(16); } }
        public bool IsNewProcess { get { return GetInt32At(SkipUnicodeString(16)) != 0; } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(16) + 4); } }
        public int RequestNumber { get { return GetInt32At(SkipUnicodeString(16) + 8); } }

        #region Private
        internal W3CGIFAssignProcess(Action<W3CGIFAssignProcess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFAssignProcess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "CommandLine", CommandLine);
            XmlAttrib(sb, "IsNewProcess", IsNewProcess);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "RequestNumber", RequestNumber);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CommandLine", "IsNewProcess", "ProcessId", "RequestNumber" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CommandLine;
                case 2:
                    return IsNewProcess;
                case 3:
                    return ProcessId;
                case 4:
                    return RequestNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFAssignProcess> m_target;
        #endregion
    }
    public sealed class W3CGIFStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFStart(Action<W3CGIFStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFStart> m_target;
        #endregion
    }
    public sealed class W3CGIFEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFEnd(Action<W3CGIFEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFEnd> m_target;
        #endregion
    }
    public sealed class W3CGIFScriptProcessorMissing : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFScriptProcessorMissing(Action<W3CGIFScriptProcessorMissing> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFScriptProcessorMissing>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFScriptProcessorMissing> m_target;
        #endregion
    }
    public sealed class W3CGIFAddJobObjectFail : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFAddJobObjectFail(Action<W3CGIFAddJobObjectFail> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFAddJobObjectFail>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFAddJobObjectFail> m_target;
        #endregion
    }
    public sealed class W3CGIFQueueFull : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFQueueFull(Action<W3CGIFQueueFull> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFQueueFull>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFQueueFull> m_target;
        #endregion
    }
    public sealed class W3CGIFActivityTimeout : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFActivityTimeout(Action<W3CGIFActivityTimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFActivityTimeout>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFActivityTimeout> m_target;
        #endregion
    }
    public sealed class W3CGIFRequestTimeout : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFRequestTimeout(Action<W3CGIFRequestTimeout> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFRequestTimeout>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFRequestTimeout> m_target;
        #endregion
    }
    public sealed class W3CGIFAppMgrShutdown : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3CGIFAppMgrShutdown(Action<W3CGIFAppMgrShutdown> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3CGIFAppMgrShutdown>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3CGIFAppMgrShutdown> m_target;
        #endregion
    }
    public sealed class W3FilterError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3FilterError(Action<W3FilterError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterError> m_target;
        #endregion
    }
    public sealed class W3FilterPreprocStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterPreprocStart(Action<W3FilterPreprocStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterPreprocStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterPreprocStart> m_target;
        #endregion
    }
    public sealed class W3FilterPreprocEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterPreprocEnd(Action<W3FilterPreprocEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterPreprocEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterPreprocEnd> m_target;
        #endregion
    }
    public sealed class W3FilterURLMapStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigURL { get { return GetUTF8StringAt(16); } }
        public string OrigPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int AccessPerms { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }
        public int MatchingPath { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16)) + 4); } }
        public int MatchingURL { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16)) + 8); } }
        public string ScriptMapEntry { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16)) + 12); } }

        #region Private
        internal W3FilterURLMapStart(Action<W3FilterURLMapStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16)) + 12)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16)) + 12)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterURLMapStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OrigURL", OrigURL);
            XmlAttrib(sb, "OrigPath", OrigPath);
            XmlAttrib(sb, "AccessPerms", AccessPerms);
            XmlAttrib(sb, "MatchingPath", MatchingPath);
            XmlAttrib(sb, "MatchingURL", MatchingURL);
            XmlAttrib(sb, "ScriptMapEntry", ScriptMapEntry);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigURL", "OrigPath", "AccessPerms", "MatchingPath", "MatchingURL", "ScriptMapEntry" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigURL;
                case 2:
                    return OrigPath;
                case 3:
                    return AccessPerms;
                case 4:
                    return MatchingPath;
                case 5:
                    return MatchingURL;
                case 6:
                    return ScriptMapEntry;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterURLMapStart> m_target;
        #endregion
    }
    public sealed class W3FilterURLMapEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalURL { get { return GetUTF8StringAt(16); } }
        public string FinalPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int AccessPerms { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }
        public int MatchingPath { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16)) + 4); } }
        public int MatchingURL { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16)) + 8); } }
        public string ScriptMapEntry { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16)) + 12); } }

        #region Private
        internal W3FilterURLMapEnd(Action<W3FilterURLMapEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(16)) + 12)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(16)) + 12)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterURLMapEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FinalURL", FinalURL);
            XmlAttrib(sb, "FinalPath", FinalPath);
            XmlAttrib(sb, "AccessPerms", AccessPerms);
            XmlAttrib(sb, "MatchingPath", MatchingPath);
            XmlAttrib(sb, "MatchingURL", MatchingURL);
            XmlAttrib(sb, "ScriptMapEntry", ScriptMapEntry);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalURL", "FinalPath", "AccessPerms", "MatchingPath", "MatchingURL", "ScriptMapEntry" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalURL;
                case 2:
                    return FinalPath;
                case 3:
                    return AccessPerms;
                case 4:
                    return MatchingPath;
                case 5:
                    return MatchingURL;
                case 6:
                    return ScriptMapEntry;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterURLMapEnd> m_target;
        #endregion
    }
    public sealed class W3FilterAuthenticationStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigUserName { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3FilterAuthenticationStart(Action<W3FilterAuthenticationStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAuthenticationStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OrigUserName", OrigUserName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigUserName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigUserName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAuthenticationStart> m_target;
        #endregion
    }
    public sealed class W3FilterAuthenticationEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalUserName { get { return GetUTF8StringAt(16); } }
        public bool PasswordChanged { get { return GetInt32At(SkipUTF8String(16)) != 0; } }

        #region Private
        internal W3FilterAuthenticationEnd(Action<W3FilterAuthenticationEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAuthenticationEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FinalUserName", FinalUserName);
            XmlAttrib(sb, "PasswordChanged", PasswordChanged);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalUserName", "PasswordChanged" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalUserName;
                case 2:
                    return PasswordChanged;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAuthenticationEnd> m_target;
        #endregion
    }
    public sealed class W3FilterAuthCompleteStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterAuthCompleteStart(Action<W3FilterAuthCompleteStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAuthCompleteStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAuthCompleteStart> m_target;
        #endregion
    }
    public sealed class W3FilterAuthCompleteEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterAuthCompleteEnd(Action<W3FilterAuthCompleteEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAuthCompleteEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAuthCompleteEnd> m_target;
        #endregion
    }
    public sealed class W3FilterSendResponseStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int HttpStatus { get { return GetInt32At(16); } }

        #region Private
        internal W3FilterSendResponseStart(Action<W3FilterSendResponseStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSendResponseStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpStatus" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSendResponseStart> m_target;
        #endregion
    }
    public sealed class W3FilterSendResponseEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterSendResponseEnd(Action<W3FilterSendResponseEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSendResponseEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSendResponseEnd> m_target;
        #endregion
    }
    public sealed class W3FilterEndOfRequestStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterEndOfRequestStart(Action<W3FilterEndOfRequestStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterEndOfRequestStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterEndOfRequestStart> m_target;
        #endregion
    }
    public sealed class W3FilterEndOfRequestEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterEndOfRequestEnd(Action<W3FilterEndOfRequestEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterEndOfRequestEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterEndOfRequestEnd> m_target;
        #endregion
    }
    public sealed class W3FilterLogStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OrigClientHostName { get { return GetUTF8StringAt(16); } }
        public string OrigClientUserName { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string OrigServerName { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string OrigOperation { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }
        public string OrigTarget { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))); } }
        public string OrigParameters { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))); } }
        public int OrigHttpStatus { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))); } }
        public int OrigWin32Status { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 4); } }

        #region Private
        internal W3FilterLogStart(Action<W3FilterLogStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterLogStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OrigClientHostName", OrigClientHostName);
            XmlAttrib(sb, "OrigClientUserName", OrigClientUserName);
            XmlAttrib(sb, "OrigServerName", OrigServerName);
            XmlAttrib(sb, "OrigOperation", OrigOperation);
            XmlAttrib(sb, "OrigTarget", OrigTarget);
            XmlAttrib(sb, "OrigParameters", OrigParameters);
            XmlAttrib(sb, "OrigHttpStatus", OrigHttpStatus);
            XmlAttrib(sb, "OrigWin32Status", OrigWin32Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OrigClientHostName", "OrigClientUserName", "OrigServerName", "OrigOperation", "OrigTarget", "OrigParameters", "OrigHttpStatus", "OrigWin32Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OrigClientHostName;
                case 2:
                    return OrigClientUserName;
                case 3:
                    return OrigServerName;
                case 4:
                    return OrigOperation;
                case 5:
                    return OrigTarget;
                case 6:
                    return OrigParameters;
                case 7:
                    return OrigHttpStatus;
                case 8:
                    return OrigWin32Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterLogStart> m_target;
        #endregion
    }
    public sealed class W3FilterLogEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FinalClientHostName { get { return GetUTF8StringAt(16); } }
        public string FinalClientUserName { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string FinalServerName { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string FinalOperation { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }
        public string FinalTarget { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))); } }
        public string FinalParameters { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))); } }
        public int FinalHttpStatus { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))))); } }
        public int FinalWin32Status { get { return GetInt32At(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 4); } }

        #region Private
        internal W3FilterLogEnd(Action<W3FilterLogEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))))) + 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterLogEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FinalClientHostName", FinalClientHostName);
            XmlAttrib(sb, "FinalClientUserName", FinalClientUserName);
            XmlAttrib(sb, "FinalServerName", FinalServerName);
            XmlAttrib(sb, "FinalOperation", FinalOperation);
            XmlAttrib(sb, "FinalTarget", FinalTarget);
            XmlAttrib(sb, "FinalParameters", FinalParameters);
            XmlAttrib(sb, "FinalHttpStatus", FinalHttpStatus);
            XmlAttrib(sb, "FinalWin32Status", FinalWin32Status);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FinalClientHostName", "FinalClientUserName", "FinalServerName", "FinalOperation", "FinalTarget", "FinalParameters", "FinalHttpStatus", "FinalWin32Status" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FinalClientHostName;
                case 2:
                    return FinalClientUserName;
                case 3:
                    return FinalServerName;
                case 4:
                    return FinalOperation;
                case 5:
                    return FinalTarget;
                case 6:
                    return FinalParameters;
                case 7:
                    return FinalHttpStatus;
                case 8:
                    return FinalWin32Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterLogEnd> m_target;
        #endregion
    }
    public sealed class W3FilterSendRawDataStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterSendRawDataStart(Action<W3FilterSendRawDataStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSendRawDataStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSendRawDataStart> m_target;
        #endregion
    }
    public sealed class W3FilterSendRawDataEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterSendRawDataEnd(Action<W3FilterSendRawDataEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSendRawDataEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSendRawDataEnd> m_target;
        #endregion
    }
    public sealed class W3FilterAccessDeniedStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RequestedURL { get { return GetUTF8StringAt(16); } }
        public string PhysicalPath { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public int DenialReason { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))); } }

        #region Private
        internal W3FilterAccessDeniedStart(Action<W3FilterAccessDeniedStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAccessDeniedStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestedURL", RequestedURL);
            XmlAttrib(sb, "PhysicalPath", PhysicalPath);
            XmlAttrib(sb, "DenialReason", DenialReason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestedURL", "PhysicalPath", "DenialReason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestedURL;
                case 2:
                    return PhysicalPath;
                case 3:
                    return DenialReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAccessDeniedStart> m_target;
        #endregion
    }
    public sealed class W3FilterAccessDeniedEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3FilterAccessDeniedEnd(Action<W3FilterAccessDeniedEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAccessDeniedEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAccessDeniedEnd> m_target;
        #endregion
    }
    public sealed class W3FilterSetReqHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal W3FilterSetReqHeader(Action<W3FilterSetReqHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSetReqHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSetReqHeader> m_target;
        #endregion
    }
    public sealed class W3FilterAddReqHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal W3FilterAddReqHeader(Action<W3FilterAddReqHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAddReqHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAddReqHeader> m_target;
        #endregion
    }
    public sealed class W3FilterSetRespHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal W3FilterSetRespHeader(Action<W3FilterSetRespHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterSetRespHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterSetRespHeader> m_target;
        #endregion
    }
    public sealed class W3FilterAddRespHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }

        #region Private
        internal W3FilterAddRespHeader(Action<W3FilterAddRespHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterAddRespHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterAddRespHeader> m_target;
        #endregion
    }
    public sealed class W3FilterStart : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public string FilterName { get { if (Version >= 0) return GetUnicodeStringAt(8); return GetUnicodeStringAt(16); } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3FilterStart(Action<W3FilterStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FilterName", FilterName);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilterName", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilterName;
                case 2:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterStart> m_target;
        #endregion
    }
    public sealed class W3FilterEnd : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public int NotificationStatus { get { if (Version >= 1) return GetInt32At(16); return 0; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3FilterEnd(Action<W3FilterEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3FilterEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "NotificationStatus", NotificationStatus);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "NotificationStatus", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return NotificationStatus;
                case 2:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3FilterEnd> m_target;
        #endregion
    }
    public sealed class W3SecIllegalShortFilename : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecIllegalShortFilename(Action<W3SecIllegalShortFilename> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecIllegalShortFilename>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecIllegalShortFilename> m_target;
        #endregion
    }
    public sealed class W3SecRejectedIP : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string IPAddress { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecRejectedIP(Action<W3SecRejectedIP> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecRejectedIP>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "IPAddress", IPAddress);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "IPAddress" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return IPAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecRejectedIP> m_target;
        #endregion
    }
    public sealed class W3SecRejectedHostname : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HostName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecRejectedHostname(Action<W3SecRejectedHostname> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecRejectedHostname>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HostName", HostName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HostName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HostName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecRejectedHostname> m_target;
        #endregion
    }
    public sealed class W3SecRequireSSL128 : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3SecRequireSSL128(Action<W3SecRequireSSL128> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecRequireSSL128>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecRequireSSL128> m_target;
        #endregion
    }
    public sealed class W3SecFileAccessDenied : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public string AccountName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string DomainName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal W3SecFileAccessDenied(Action<W3SecFileAccessDenied> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecFileAccessDenied>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "AccountName", AccountName);
            XmlAttrib(sb, "DomainName", DomainName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "AccountName", "DomainName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return AccountName;
                case 3:
                    return DomainName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecFileAccessDenied> m_target;
        #endregion
    }
    public sealed class W3SecDeniedByMimemap : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecDeniedByMimemap(Action<W3SecDeniedByMimemap> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecDeniedByMimemap>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecDeniedByMimemap> m_target;
        #endregion
    }
    public sealed class W3SecDeniedByISAPIRestriction : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ImageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecDeniedByISAPIRestriction(Action<W3SecDeniedByISAPIRestriction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecDeniedByISAPIRestriction>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ImageName", ImageName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ImageName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ImageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecDeniedByISAPIRestriction> m_target;
        #endregion
    }
    public sealed class W3SecDeniedByCGIRestriction : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ImageName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3SecDeniedByCGIRestriction(Action<W3SecDeniedByCGIRestriction> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecDeniedByCGIRestriction>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ImageName", ImageName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ImageName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ImageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecDeniedByCGIRestriction> m_target;
        #endregion
    }
    public sealed class W3SecDeniedByAccessFlags : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int CurrentFlags { get { return GetInt32At(16); } }
        public int NeededFlags { get { return GetInt32At(20); } }

        #region Private
        internal W3SecDeniedByAccessFlags(Action<W3SecDeniedByAccessFlags> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SecDeniedByAccessFlags>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "CurrentFlags", CurrentFlags);
            XmlAttrib(sb, "NeededFlags", NeededFlags);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "CurrentFlags", "NeededFlags" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return CurrentFlags;
                case 2:
                    return NeededFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SecDeniedByAccessFlags> m_target;
        #endregion
    }
    public sealed class W3GeneralStaticFileHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public string FileName { get { if (Version >= 0) return GetUnicodeStringAt(8); return GetUnicodeStringAt(16); } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3GeneralStaticFileHandler(Action<W3GeneralStaticFileHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralStaticFileHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralStaticFileHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralCGIHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3GeneralCGIHandler(Action<W3GeneralCGIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralCGIHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralCGIHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralISAPIHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3GeneralISAPIHandler(Action<W3GeneralISAPIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralISAPIHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralISAPIHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralOopISAPIHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public int ProcessId { get { if (Version >= 0) return GetInt32At(8); return GetInt32At(16); } }
        public int TotalReqs { get { if (Version >= 0) return GetInt32At(12); return GetInt32At(20); } }
        public int CurrentReqs { get { if (Version >= 0) return GetInt32At(16); return GetInt32At(24); } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3GeneralOopISAPIHandler(Action<W3GeneralOopISAPIHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 28));
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralOopISAPIHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "TotalReqs", TotalReqs);
            XmlAttrib(sb, "CurrentReqs", CurrentReqs);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ProcessId", "TotalReqs", "CurrentReqs", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ProcessId;
                case 2:
                    return TotalReqs;
                case 3:
                    return CurrentReqs;
                case 4:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralOopISAPIHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralRedirectionHandler : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RedirectedURL { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3GeneralRedirectionHandler(Action<W3GeneralRedirectionHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralRedirectionHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RedirectedURL", RedirectedURL);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RedirectedURL" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RedirectedURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralRedirectionHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralDavHandler : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal W3GeneralDavHandler(Action<W3GeneralDavHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralDavHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralDavHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralOptionsHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }
        public int BytesSent { get { return GetInt32At(8); } }

        #region Private
        internal W3GeneralOptionsHandler(Action<W3GeneralOptionsHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralOptionsHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId", "BytesSent" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                case 2:
                    return BytesSent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralOptionsHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralTraceHandler : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }
        public int BytesSent { get { return GetInt32At(8); } }

        #region Private
        internal W3GeneralTraceHandler(Action<W3GeneralTraceHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralTraceHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId", "BytesSent" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                case 2:
                    return BytesSent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralTraceHandler> m_target;
        #endregion
    }
    public sealed class W3SendResponse : TraceEvent
    {
        public long RequestId { get { return GetInt64At(0); } }
        public int BytesSent { get { return GetInt32At(8); } }

        #region Private
        internal W3SendResponse(Action<W3SendResponse> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3SendResponse>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RequestId", "BytesSent" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RequestId;
                case 1:
                    return BytesSent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3SendResponse> m_target;
        #endregion
    }
    public sealed class W3GeneralGetURLMetadata : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string PhysicalPath { get { return GetUnicodeStringAt(16); } }
        public int AccessPerms { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal W3GeneralGetURLMetadata(Action<W3GeneralGetURLMetadata> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralGetURLMetadata>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "PhysicalPath", PhysicalPath);
            XmlAttrib(sb, "AccessPerms", AccessPerms);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "PhysicalPath", "AccessPerms" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return PhysicalPath;
                case 2:
                    return AccessPerms;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralGetURLMetadata> m_target;
        #endregion
    }
    public sealed class W3GeneralChildRequestStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int SiteId { get { return GetInt32At(16); } }
        public string RequestURL { get { return GetUnicodeStringAt(20); } }
        public string RequestVerb { get { return GetUTF8StringAt(SkipUnicodeString(20)); } }
        public int RecursiveLevel { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(20))); } }

        #region Private
        internal W3GeneralChildRequestStart(Action<W3GeneralChildRequestStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(20)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(20)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralChildRequestStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "SiteId", SiteId);
            XmlAttrib(sb, "RequestURL", RequestURL);
            XmlAttrib(sb, "RequestVerb", RequestVerb);
            XmlAttrib(sb, "RecursiveLevel", RecursiveLevel);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "RequestURL", "RequestVerb", "RecursiveLevel" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return RequestURL;
                case 3:
                    return RequestVerb;
                case 4:
                    return RecursiveLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralChildRequestStart> m_target;
        #endregion
    }
    public sealed class W3GeneralChildRequestEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int HttpStatus { get { return GetInt32At(20); } }
        public int HttpSubStatus { get { return GetInt16At(24); } }

        #region Private
        internal W3GeneralChildRequestEnd(Action<W3GeneralChildRequestEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 26));
            Debug.Assert(!(Version > 1 && EventDataLength < 26));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralChildRequestEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "HttpStatus", "HttpSubStatus" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return HttpStatus;
                case 3:
                    return HttpSubStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralChildRequestEnd> m_target;
        #endregion
    }
    public sealed class W3GeneralSendCustomError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int HttpStatus { get { return GetInt32At(16); } }
        public int HttpSubStatus { get { return GetInt16At(20); } }
        public string FileNameOrURL { get { return GetUnicodeStringAt(22); } }

        #region Private
        internal W3GeneralSendCustomError(Action<W3GeneralSendCustomError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(22)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(22)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralSendCustomError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
            XmlAttrib(sb, "FileNameOrURL", FileNameOrURL);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HttpStatus", "HttpSubStatus", "FileNameOrURL" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HttpStatus;
                case 2:
                    return HttpSubStatus;
                case 3:
                    return FileNameOrURL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralSendCustomError> m_target;
        #endregion
    }
    public sealed class W3GeneralMapHandler : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3GeneralMapHandler(Action<W3GeneralMapHandler> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralMapHandler>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralMapHandler> m_target;
        #endregion
    }
    public sealed class W3GeneralFlushResponseStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3GeneralFlushResponseStart(Action<W3GeneralFlushResponseStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralFlushResponseStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralFlushResponseStart> m_target;
        #endregion
    }
    public sealed class W3GeneralFlushResponseEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal W3GeneralFlushResponseEnd(Action<W3GeneralFlushResponseEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralFlushResponseEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralFlushResponseEnd> m_target;
        #endregion
    }
    public sealed class W3GeneralReadEntityStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3GeneralReadEntityStart(Action<W3GeneralReadEntityStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralReadEntityStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralReadEntityStart> m_target;
        #endregion
    }
    public sealed class W3GeneralReadEntityEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesReceived { get { return GetInt32At(16); } }
        public int ErrorCode { get { return GetInt32At(20); } }

        #region Private
        internal W3GeneralReadEntityEnd(Action<W3GeneralReadEntityEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralReadEntityEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesReceived", BytesReceived);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesReceived", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesReceived;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralReadEntityEnd> m_target;
        #endregion
    }
    public sealed class IISGeneralFileChangeNotification : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FilePath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralFileChangeNotification(Action<IISGeneralFileChangeNotification> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralFileChangeNotification>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FilePath", FilePath);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FilePath" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralFileChangeNotification> m_target;
        #endregion
    }
    public sealed class IISGeneralConfigChangeNotification : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ConfigPath { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISGeneralConfigChangeNotification(Action<IISGeneralConfigChangeNotification> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralConfigChangeNotification>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ConfigPath", ConfigPath);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ConfigPath" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ConfigPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralConfigChangeNotification> m_target;
        #endregion
    }
    public sealed class IISGeneralVirtualModuleUnresolved : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Type { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralVirtualModuleUnresolved(Action<IISGeneralVirtualModuleUnresolved> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralVirtualModuleUnresolved>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Name", Name);
            XmlAttrib(sb, "Type", Type);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Type" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralVirtualModuleUnresolved> m_target;
        #endregion
    }
    public sealed class IISGeneralUrlChanged : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldUrl { get { return GetUnicodeStringAt(16); } }
        public string NewUrl { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralUrlChanged(Action<IISGeneralUrlChanged> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralUrlChanged>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OldUrl", OldUrl);
            XmlAttrib(sb, "NewUrl", NewUrl);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldUrl", "NewUrl" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldUrl;
                case 2:
                    return NewUrl;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralUrlChanged> m_target;
        #endregion
    }
    public sealed class IISGeneralHandlerChanged : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string OldHandlerName { get { return GetUnicodeStringAt(16); } }
        public string NewHandlerName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string NewHandlerModules { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public string NewHandlerScriptProcessor { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }
        public string NewHandlerType { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))))); } }

        #region Private
        internal IISGeneralHandlerChanged(Action<IISGeneralHandlerChanged> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralHandlerChanged>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "OldHandlerName", OldHandlerName);
            XmlAttrib(sb, "NewHandlerName", NewHandlerName);
            XmlAttrib(sb, "NewHandlerModules", NewHandlerModules);
            XmlAttrib(sb, "NewHandlerScriptProcessor", NewHandlerScriptProcessor);
            XmlAttrib(sb, "NewHandlerType", NewHandlerType);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "OldHandlerName", "NewHandlerName", "NewHandlerModules", "NewHandlerScriptProcessor", "NewHandlerType" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return OldHandlerName;
                case 2:
                    return NewHandlerName;
                case 3:
                    return NewHandlerModules;
                case 4:
                    return NewHandlerScriptProcessor;
                case 5:
                    return NewHandlerType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralHandlerChanged> m_target;
        #endregion
    }
    public sealed class IISGeneralUserSet : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string AuthType { get { return GetUnicodeStringAt(16); } }
        public string UserName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public bool SupportsIsInRole { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(16))) != 0; } }

        #region Private
        internal IISGeneralUserSet(Action<IISGeneralUserSet> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralUserSet>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "AuthType", AuthType);
            XmlAttrib(sb, "UserName", UserName);
            XmlAttrib(sb, "SupportsIsInRole", SupportsIsInRole);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "AuthType", "UserName", "SupportsIsInRole" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return AuthType;
                case 2:
                    return UserName;
                case 3:
                    return SupportsIsInRole;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralUserSet> m_target;
        #endregion
    }
    public sealed class IISGeneralModulePreconditionNotMatch : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralModulePreconditionNotMatch(Action<IISGeneralModulePreconditionNotMatch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralModulePreconditionNotMatch>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Name", Name);
            XmlAttrib(sb, "Precondition", Precondition);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralModulePreconditionNotMatch> m_target;
        #endregion
    }
    public sealed class IISGeneralHandlerPreconditionNotMatch : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Name { get { return GetUnicodeStringAt(16); } }
        public string Precondition { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal IISGeneralHandlerPreconditionNotMatch(Action<IISGeneralHandlerPreconditionNotMatch> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISGeneralHandlerPreconditionNotMatch>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Name", Name);
            XmlAttrib(sb, "Precondition", Precondition);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Name", "Precondition" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Name;
                case 2:
                    return Precondition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISGeneralHandlerPreconditionNotMatch> m_target;
        #endregion
    }
    public sealed class W3GeneralResponseHeaders : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3GeneralResponseHeaders(Action<W3GeneralResponseHeaders> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralResponseHeaders>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Headers", Headers);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralResponseHeaders> m_target;
        #endregion
    }
    public sealed class W3GeneralResponseEntityFile : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string FileName { get { return GetUnicodeStringAt(16); } }
        public long Offset { get { return GetInt64At(SkipUnicodeString(16)); } }
        public long Size { get { return GetInt64At(SkipUnicodeString(16) + 8); } }

        #region Private
        internal W3GeneralResponseEntityFile(Action<W3GeneralResponseEntityFile> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralResponseEntityFile>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "FileName", FileName);
            XmlAttrib(sb, "Offset", Offset);
            XmlAttrib(sb, "Size", Size);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "FileName", "Offset", "Size" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return FileName;
                case 2:
                    return Offset;
                case 3:
                    return Size;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralResponseEntityFile> m_target;
        #endregion
    }
    public sealed class W3GeneralResponseEntityBuffer : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Buffer { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3GeneralResponseEntityBuffer(Action<W3GeneralResponseEntityBuffer> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralResponseEntityBuffer>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Buffer", Buffer);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralResponseEntityBuffer> m_target;
        #endregion
    }
    public sealed class W3GeneralRequestHeaders : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Headers { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3GeneralRequestHeaders(Action<W3GeneralRequestHeaders> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralRequestHeaders>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Headers", Headers);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Headers" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Headers;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralRequestHeaders> m_target;
        #endregion
    }
    public sealed class W3GeneralRequestEntity : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string Buffer { get { return GetUTF8StringAt(16); } }

        #region Private
        internal W3GeneralRequestEntity(Action<W3GeneralRequestEntity> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralRequestEntity>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Buffer", Buffer);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Buffer" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Buffer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralRequestEntity> m_target;
        #endregion
    }
    public sealed class W3GeneralNotSendCustomError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Reason { get { return GetInt32At(16); } }

        #region Private
        internal W3GeneralNotSendCustomError(Action<W3GeneralNotSendCustomError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralNotSendCustomError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralNotSendCustomError> m_target;
        #endregion
    }
    public sealed class W3GeneralSetRequestHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal W3GeneralSetRequestHeader(Action<W3GeneralSetRequestHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralSetRequestHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            XmlAttrib(sb, "Replace", Replace);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralSetRequestHeader> m_target;
        #endregion
    }
    public sealed class W3GeneralModuleFactoryFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal W3GeneralModuleFactoryFailed(Action<W3GeneralModuleFactoryFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralModuleFactoryFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralModuleFactoryFailed> m_target;
        #endregion
    }
    public sealed class W3GeneralEndpointInformation : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string RemoteAddress { get { return GetUTF8StringAt(16); } }
        public string RemotePort { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public string LocalAddress { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(16))); } }
        public string LocalPort { get { return GetUTF8StringAt(SkipUTF8String(SkipUTF8String(SkipUTF8String(16)))); } }

        #region Private
        internal W3GeneralEndpointInformation(Action<W3GeneralEndpointInformation> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(SkipUTF8String(SkipUTF8String(16))))));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralEndpointInformation>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RemoteAddress", RemoteAddress);
            XmlAttrib(sb, "RemotePort", RemotePort);
            XmlAttrib(sb, "LocalAddress", LocalAddress);
            XmlAttrib(sb, "LocalPort", LocalPort);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RemoteAddress", "RemotePort", "LocalAddress", "LocalPort" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RemoteAddress;
                case 2:
                    return RemotePort;
                case 3:
                    return LocalAddress;
                case 4:
                    return LocalPort;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralEndpointInformation> m_target;
        #endregion
    }
    public sealed class W3GeneralSetResponseHeader : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string HeaderName { get { return GetUTF8StringAt(16); } }
        public string HeaderValue { get { return GetUTF8StringAt(SkipUTF8String(16)); } }
        public bool Replace { get { return GetInt32At(SkipUTF8String(SkipUTF8String(16))) != 0; } }

        #region Private
        internal W3GeneralSetResponseHeader(Action<W3GeneralSetResponseHeader> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUTF8String(16)) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUTF8String(16)) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralSetResponseHeader>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "HeaderName", HeaderName);
            XmlAttrib(sb, "HeaderValue", HeaderValue);
            XmlAttrib(sb, "Replace", Replace);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "HeaderName", "HeaderValue", "Replace" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return HeaderName;
                case 2:
                    return HeaderValue;
                case 3:
                    return Replace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralSetResponseHeader> m_target;
        #endregion
    }
    public sealed class W3GeneralStartNewRequest : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public int SiteId { get { if (Version >= 1) return GetInt32At(16); return 0; } }
        public string AppPoolId { get { if (Version >= 1) return GetUnicodeStringAt(20); return ""; } }
        public long ConnId { get { if (Version >= 1) return GetInt64At(SkipUnicodeString(20)); return 0; } }
        public long RawConnId { get { if (Version >= 1) return GetInt64At(SkipUnicodeString(20) + 8); return 0; } }
        public string RequestURL { get { if (Version >= 1) return GetUnicodeStringAt(SkipUnicodeString(20) + 16); return ""; } }
        public string RequestVerb { get { if (Version >= 1) return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(20) + 16)); return ""; } }
        public long RequestId { get { return GetInt64At(0); } }
        public int BytesReceived { get { return GetInt32At(8); } }

        #region Private
        internal W3GeneralStartNewRequest(Action<W3GeneralStartNewRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(SkipUnicodeString(20) + 16))));
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralStartNewRequest>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "SiteId", SiteId);
            XmlAttrib(sb, "AppPoolId", AppPoolId);
            XmlAttrib(sb, "ConnId", ConnId);
            XmlAttrib(sb, "RawConnId", RawConnId);
            XmlAttrib(sb, "RequestURL", RequestURL);
            XmlAttrib(sb, "RequestVerb", RequestVerb);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttrib(sb, "BytesReceived", BytesReceived);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "SiteId", "AppPoolId", "ConnId", "RawConnId", "RequestURL", "RequestVerb", "RequestId", "BytesReceived" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return SiteId;
                case 2:
                    return AppPoolId;
                case 3:
                    return ConnId;
                case 4:
                    return RawConnId;
                case 5:
                    return RequestURL;
                case 6:
                    return RequestVerb;
                case 7:
                    return RequestId;
                case 8:
                    return BytesReceived;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralStartNewRequest> m_target;
        #endregion
    }
    public sealed class W3GeneralEndNewRequest : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        //public int BytesSent { get { if (Version >= 0) return GetInt32At(8); return GetInt32At(16); } }
        public int BytesSent { get { if (Version >= 1) return GetInt32At(16); return 0; } }
        public int BytesReceived { get { if (Version >= 1) return GetInt32At(20); return 0; } }
        public int HttpStatus { get { if (Version >= 1) return GetInt32At(24); return 0; } }
        public int HttpSubStatus { get { if (Version >= 1) return GetInt16At(28); return 0; } }
        public long RequestId { get { return GetInt64At(0); } }

        #region Private
        internal W3GeneralEndNewRequest(Action<W3GeneralEndNewRequest> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 30));
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3GeneralEndNewRequest>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            XmlAttrib(sb, "BytesReceived", BytesReceived);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
            XmlAttrib(sb, "RequestId", RequestId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent", "BytesReceived", "HttpStatus", "HttpSubStatus", "RequestId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                case 2:
                    return BytesReceived;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpSubStatus;
                case 5:
                    return RequestId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3GeneralEndNewRequest> m_target;
        #endregion
    }
    public sealed class W3WebSocketEndSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketEndSuccess(Action<W3WebSocketEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketEndSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketEndSuccess> m_target;
        #endregion
    }
    public sealed class W3WebSocketEndFailure : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketEndFailure(Action<W3WebSocketEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketEndFailure>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketEndFailure> m_target;
        #endregion
    }
    public sealed class W3WebSocketReadFragmentStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BufferSize { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketReadFragmentStart(Action<W3WebSocketReadFragmentStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketReadFragmentStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BufferSize", BufferSize);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BufferSize" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BufferSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketReadFragmentStart> m_target;
        #endregion
    }
    public sealed class W3WebSocketWriteFragmentEndPending : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketWriteFragmentEndPending(Action<W3WebSocketWriteFragmentEndPending> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketWriteFragmentEndPending>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketWriteFragmentEndPending> m_target;
        #endregion
    }
    public sealed class W3WebSocketWriteFragmentEndSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesSent { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketWriteFragmentEndSuccess(Action<W3WebSocketWriteFragmentEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketWriteFragmentEndSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesSent", BytesSent);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesSent" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesSent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketWriteFragmentEndSuccess> m_target;
        #endregion
    }
    public sealed class W3WebSocketWriteFragmentEndFailure : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketWriteFragmentEndFailure(Action<W3WebSocketWriteFragmentEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketWriteFragmentEndFailure>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketWriteFragmentEndFailure> m_target;
        #endregion
    }
    public sealed class W3WebSocketApplicationCloseConnection : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketApplicationCloseConnection(Action<W3WebSocketApplicationCloseConnection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketApplicationCloseConnection>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketApplicationCloseConnection> m_target;
        #endregion
    }
    public sealed class W3WebSocketModuleCloseConnection : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Reason { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketModuleCloseConnection(Action<W3WebSocketModuleCloseConnection> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketModuleCloseConnection>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketModuleCloseConnection> m_target;
        #endregion
    }
    public sealed class W3WebSocketReadIoFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketReadIoFailed(Action<W3WebSocketReadIoFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketReadIoFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketReadIoFailed> m_target;
        #endregion
    }
    public sealed class W3WebSocketWriteIoFailed : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketWriteIoFailed(Action<W3WebSocketWriteIoFailed> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketWriteIoFailed>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketWriteIoFailed> m_target;
        #endregion
    }
    public sealed class W3WebSocketCloseReceived : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Status { get { return GetInt32At(16); } }
        public string Reason { get { return GetUnicodeStringAt(20); } }

        #region Private
        internal W3WebSocketCloseReceived(Action<W3WebSocketCloseReceived> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(20)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketCloseReceived>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Status", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Status;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketCloseReceived> m_target;
        #endregion
    }
    public sealed class W3WebSocketCloseSendStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int Status { get { return GetInt32At(16); } }
        public string Reason { get { return GetUnicodeStringAt(20); } }

        #region Private
        internal W3WebSocketCloseSendStart(Action<W3WebSocketCloseSendStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(20)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(20)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketCloseSendStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "Status", Status);
            XmlAttrib(sb, "Reason", Reason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "Status", "Reason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return Status;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketCloseSendStart> m_target;
        #endregion
    }
    public sealed class W3WebSocketCloseSendSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketCloseSendSuccess(Action<W3WebSocketCloseSendSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketCloseSendSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketCloseSendSuccess> m_target;
        #endregion
    }
    public sealed class W3WebSocketCloseSendFailure : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketCloseSendFailure(Action<W3WebSocketCloseSendFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketCloseSendFailure>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketCloseSendFailure> m_target;
        #endregion
    }
    public sealed class W3WebSocketReadFragmentEndPending : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketReadFragmentEndPending(Action<W3WebSocketReadFragmentEndPending> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketReadFragmentEndPending>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketReadFragmentEndPending> m_target;
        #endregion
    }
    public sealed class W3WebSocketReadFragmentEndSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int BytesReceived { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketReadFragmentEndSuccess(Action<W3WebSocketReadFragmentEndSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketReadFragmentEndSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "BytesReceived", BytesReceived);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "BytesReceived" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return BytesReceived;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketReadFragmentEndSuccess> m_target;
        #endregion
    }
    public sealed class W3WebSocketWriteFragmentStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int DataType { get { return GetInt32At(16); } }
        public int DataSize { get { return GetInt32At(20); } }

        #region Private
        internal W3WebSocketWriteFragmentStart(Action<W3WebSocketWriteFragmentStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketWriteFragmentStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "DataType", DataType);
            XmlAttrib(sb, "DataSize", DataSize);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "DataType", "DataSize" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return DataType;
                case 2:
                    return DataSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketWriteFragmentStart> m_target;
        #endregion
    }
    public sealed class W3WebSocketInitializeNotSuccess : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketInitializeNotSuccess(Action<W3WebSocketInitializeNotSuccess> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketInitializeNotSuccess>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketInitializeNotSuccess> m_target;
        #endregion
    }
    public sealed class W3WebSocketStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }

        #region Private
        internal W3WebSocketStart(Action<W3WebSocketStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version > 1 && EventDataLength < 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketStart> m_target;
        #endregion
    }
    public sealed class W3WebSocketReadFragmentEndFailure : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public int ErrorCode { get { return GetInt32At(16); } }

        #region Private
        internal W3WebSocketReadFragmentEndFailure(Action<W3WebSocketReadFragmentEndFailure> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 20));
            Debug.Assert(!(Version > 1 && EventDataLength < 20));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3WebSocketReadFragmentEndFailure>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3WebSocketReadFragmentEndFailure> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleCriticalError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleCriticalError(Action<IISModuleEventsModuleCriticalError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleCriticalError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleCriticalError> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleError(Action<IISModuleEventsModuleError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleError> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleWarning : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleWarning(Action<IISModuleEventsModuleWarning> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleWarning>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleWarning> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleInformation : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleInformation(Action<IISModuleEventsModuleInformation> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleInformation>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleInformation> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleVerbose : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleVerbose(Action<IISModuleEventsModuleVerbose> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleVerbose>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleVerbose> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleStart(Action<IISModuleEventsModuleStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleStart> m_target;
        #endregion
    }
    public sealed class IISModuleEventsModuleEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public string Data1 { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public string Data2 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(16))); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16)))); } }

        #region Private
        internal IISModuleEventsModuleEnd(Action<IISModuleEventsModuleEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(16))) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISModuleEventsModuleEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Data1", Data1);
            XmlAttrib(sb, "Data2", Data2);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Data1", "Data2", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Data1;
                case 3:
                    return Data2;
                case 4:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISModuleEventsModuleEnd> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsCompletion : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotificationEvent { get { return GetInt32At(SkipUnicodeString(16) + 4) != 0; } }
        public int CompletionBytes { get { return GetInt32At(SkipUnicodeString(16) + 8); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16) + 12); } }

        #region Private
        internal IISRequestNotificationEventsCompletion(Action<IISRequestNotificationEventsCompletion> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 16));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 16));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsCompletion>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "fIsPostNotificationEvent", fIsPostNotificationEvent);
            XmlAttrib(sb, "CompletionBytes", CompletionBytes);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotificationEvent", "CompletionBytes", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotificationEvent;
                case 4:
                    return CompletionBytes;
                case 5:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsCompletion> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationPreBeginStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISRequestNotificationPreBeginStart(Action<IISRequestNotificationPreBeginStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationPreBeginStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationPreBeginStart> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationPreBeginEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int NotificationStatus { get { return GetInt32At(SkipUnicodeString(16)); } }

        #region Private
        internal IISRequestNotificationPreBeginEnd(Action<IISRequestNotificationPreBeginEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 4));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 4));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationPreBeginEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "NotificationStatus", NotificationStatus);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "NotificationStatus" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return NotificationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationPreBeginEnd> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsError : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(16) + 4); } }

        #region Private
        internal IISRequestNotificationEventsError(Action<IISRequestNotificationEventsError> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsError>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsError> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsResponseErrorStatus : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public int HttpStatus { get { return GetInt32At(SkipUnicodeString(16) + 4); } }
        public string HttpReason { get { return GetUTF8StringAt(SkipUnicodeString(16) + 8); } }
        public int HttpSubStatus { get { return GetInt16At(SkipUTF8String(SkipUnicodeString(16) + 8)); } }
        public int ErrorCode { get { return GetInt32At(SkipUTF8String(SkipUnicodeString(16) + 8) + 2); } }
        public string ConfigExceptionInfo { get { return GetUnicodeStringAt(SkipUTF8String(SkipUnicodeString(16) + 8) + 6); } }

        #region Private
        internal IISRequestNotificationEventsResponseErrorStatus(Action<IISRequestNotificationEventsResponseErrorStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUTF8String(SkipUnicodeString(16) + 8) + 6)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUTF8String(SkipUnicodeString(16) + 8) + 6)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsResponseErrorStatus>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            XmlAttrib(sb, "HttpReason", HttpReason);
            XmlAttrib(sb, "HttpSubStatus", HttpSubStatus);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            XmlAttrib(sb, "ConfigExceptionInfo", ConfigExceptionInfo);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "HttpStatus", "HttpReason", "HttpSubStatus", "ErrorCode", "ConfigExceptionInfo" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpReason;
                case 5:
                    return HttpSubStatus;
                case 6:
                    return ErrorCode;
                case 7:
                    return ConfigExceptionInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsResponseErrorStatus> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsResponseSuccessStatus : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public int HttpStatus { get { return GetInt32At(SkipUnicodeString(16) + 4); } }
        public string HttpReason { get { return GetUTF8StringAt(SkipUnicodeString(16) + 8); } }

        #region Private
        internal IISRequestNotificationEventsResponseSuccessStatus(Action<IISRequestNotificationEventsResponseSuccessStatus> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUTF8String(SkipUnicodeString(16) + 8)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUTF8String(SkipUnicodeString(16) + 8)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsResponseSuccessStatus>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "HttpStatus", HttpStatus);
            XmlAttrib(sb, "HttpReason", HttpReason);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "HttpStatus", "HttpReason" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return HttpStatus;
                case 4:
                    return HttpReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsResponseSuccessStatus> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsResponseErrorDescription : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ErrorDescription { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal IISRequestNotificationEventsResponseErrorDescription(Action<IISRequestNotificationEventsResponseErrorDescription> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsResponseErrorDescription>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ErrorDescription", ErrorDescription);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ErrorDescription" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ErrorDescription;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsResponseErrorDescription> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsStart : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotification { get { return GetInt32At(SkipUnicodeString(16) + 4) != 0; } }

        #region Private
        internal IISRequestNotificationEventsStart(Action<IISRequestNotificationEventsStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 8));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 8));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "fIsPostNotification", fIsPostNotification);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotification" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotification;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsStart> m_target;
        #endregion
    }
    public sealed class IISRequestNotificationEventsEnd : TraceEvent
    {
        public Guid ContextId { get { return GetGuidAt(0); } }
        public string ModuleName { get { return GetUnicodeStringAt(16); } }
        public int Notification { get { return GetInt32At(SkipUnicodeString(16)); } }
        public bool fIsPostNotificationEvent { get { return GetInt32At(SkipUnicodeString(16) + 4) != 0; } }
        public int NotificationStatus { get { return GetInt32At(SkipUnicodeString(16) + 8); } }

        #region Private
        internal IISRequestNotificationEventsEnd(Action<IISRequestNotificationEventsEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(16) + 12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(16) + 12));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IISRequestNotificationEventsEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "ModuleName", ModuleName);
            XmlAttrib(sb, "Notification", Notification);
            XmlAttrib(sb, "fIsPostNotificationEvent", fIsPostNotificationEvent);
            XmlAttrib(sb, "NotificationStatus", NotificationStatus);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "ModuleName", "Notification", "fIsPostNotificationEvent", "NotificationStatus" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return ModuleName;
                case 2:
                    return Notification;
                case 3:
                    return fIsPostNotificationEvent;
                case 4:
                    return NotificationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IISRequestNotificationEventsEnd> m_target;
        #endregion
    }
    public sealed class IsapiDeleteContext : TraceEvent
    {
        public long RequestId { get { return GetInt64At(0); } }
        public Address connID { get { return GetAddressAt(8); } }

        #region Private
        internal IsapiDeleteContext(Action<IsapiDeleteContext> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<IsapiDeleteContext>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttribHex(sb, "connID", connID);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RequestId", "connID" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RequestId;
                case 1:
                    return connID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IsapiDeleteContext> m_target;
        #endregion
    }
    public sealed class W3ISAPIStart : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }
        public Address connID { get { return GetAddressAt(8); } }
        public int fOop { get { return GetInt32At(HostOffset(12, 1)); } }

        #region Private
        internal W3ISAPIStart(Action<W3ISAPIStart> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 1)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3ISAPIStart>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttribHex(sb, "connID", connID);
            XmlAttrib(sb, "fOop", fOop);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId", "connID", "fOop" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                case 2:
                    return connID;
                case 3:
                    return fOop;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3ISAPIStart> m_target;
        #endregion
    }
    public sealed class W3ISAPIEnd : TraceEvent
    {
        public Guid ContextId { get { if (Version >= 1) return GetGuidAt(0); return Guid.Empty; } }
        public long RequestId { get { return GetInt64At(0); } }
        public Address connID { get { return GetAddressAt(8); } }

        #region Private
        internal W3ISAPIEnd(Action<W3ISAPIEnd> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        internal protected override void Dispatch()
        {
            m_target(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 16));
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        internal protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<W3ISAPIEnd>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextId", ContextId);
            XmlAttrib(sb, "RequestId", RequestId);
            XmlAttribHex(sb, "connID", connID);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextId", "RequestId", "connID" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextId;
                case 1:
                    return RequestId;
                case 2:
                    return connID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<W3ISAPIEnd> m_target;
        #endregion
    }
}
